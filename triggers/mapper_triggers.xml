<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Night/Blind Movement</name>
			<script>if not wotmudmapper.dark then
  wotmudmapper.dark = true
end
local currentRoomName, currentRoomDesc, currentRoomExits
local mapCommand, lastID
--Specifying the type of movement. If not fleeing or following, then take from queue
if not wotmudmapper.flee and not wotmudmapper.following then
  mapCommand = wotmudmapper.queue:popleft()
else
  --else, fleeing or following
  if wotmudmapper.following then
    --treat following as a flee movement
    mapCommand = "f"
    --setting following at false for the following map movement
    wotmudmapper.following = false
  else
    --checking if next command in line is flee
    mapCommand = wotmudmapper.queue:checkleftvalue()
    --if yes, then take command from queue
    if isFlee(mapCommand) then
      wotmudmapper.queue:popleft()
    else
      --if no, then it is autowimpy flee
      mapCommand = "f"
    end
    --setting flee at false for the following map movement
    wotmudmapper.flee = false
  end
end
--finished specifying if movement was regular or a flee
--loading the previous roomID.
lastID = wotmudmapper.currentID
currentRoomName = ""
currentRoomDesc = ""
currentRoomExits = {}
local newID = {}
--if mapCommand is a direction and you were in a valid room
if isMovement(mapCommand) and (not table.is_empty(lastID)) then
  for k, v in pairs(lastID) do
    local rooms =
      wotmudmapper:isNearRoom(mapCommand, currentRoomName, currentRoomDesc, getRoomExits(v))
    if not table.contains(newID, rooms[1]) then
      table.insert(newID, rooms[1])
    end
  end
  wotmudmapper.currentID = newID
  --handling flees
elseif isFlee(mapCommand) and (not table.is_empty(lastID)) then
  for k, v in pairs(lastID) do
    local rooms = getRoomExits(v)
    for kk, vv in pairs(rooms) do
      if not table.contains(newID, vv) then
        table.insert(newID, vv)
      end
    end
  end
  wotmudmapper.currentID = newID
  --if looking at room, dont need to change ID
elseif isLook(mapCommand) and table.size(lastID) == 1 then
else
	wotmudmapper.currentID = {}
end

if table.is_empty(wotmudmapper.currentID) then
  wotmudmapper:echo("\nNo matches found.",false,true)
elseif table.size(wotmudmapper.currentID) &gt; 1 then
  wotmudmapper:echo("\nMultiple matches found.",false,true)
else
  centerview(wotmudmapper.currentID[1])
  --note room exits that lead to unknown rooms (as they may be DTs)
  if getExitStubs(wotmudmapper.currentID[1]) then
    for k, v in pairs(getExitStubs(wotmudmapper.currentID[1])) do
      wotmudmapper:echo(
        "\nCaution. Direction " .. wotmudmapper.exitmap[v] .. " leads to an unknown room.",
        false,
        true
      )
    end
  end
  --displaying the zone
  wotmudmapper.zone = getRoomUserData(wotmudmapper.currentID[1], "zone")
  cecho("\n&lt;"..wotmudmapper.configs.zonecolor.."&gt;Zone: " .. wotmudmapper.zone)
  --showing the doors that have been stored
  for k, v in pairs({"north", "east", "south", "west", "up", "down"}) do
    local dir = string.sub(v, 1, 1)
    if getRoomUserData(wotmudmapper.currentID[1], dir) ~= "" then
      cecho("\n&lt;"..wotmudmapper.configs.doorcolor.."&gt;Door " .. v .. ": &lt;white&gt;" .. getRoomUserData(wotmudmapper.currentID[1], dir))
    end
  end
end</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>It is pitch black\.\.\.$</string>
				<string>You can't see a damned thing, you're blinded!$</string>
				<string>You can't see a damned thing in this thick fog!$</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>1</integer>
				<integer>1</integer>
				<integer>1</integer>
			</regexCodePropertyList>
		</Trigger>
	</TriggerPackage>
</MudletPackage>
