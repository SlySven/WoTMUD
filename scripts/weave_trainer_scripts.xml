<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Weave Trainer</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>Weave Trainer Initializations</name>
				<packageName></packageName>
				<script>weave_trainer = weave_trainer or {}
weave_trainer.container =
  weave_trainer.container or
  Adjustable.Container:new(
    {
      name = "weave_trainer.container",
      adjLabelstyle = "background-color:rgba(255,255,255,100%); border: 5px groove grey;",
      buttonstyle =
        [[
      QLabel{ border-radius: 7px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
      ]],
      buttonFontSize = 10,
      buttonsize = 20,
      titleText = "Weave Trainer",
      titleTxtColor = "black",
      padding = 15,
      x = "10%",
      y = "10%",
      width = "80%",
      height = "80%",
      autoLoad = false,
      autoSave = false,
    }
  )
weave_trainer.stats =
  weave_trainer.stats or {int = 19}
weave_trainer.stats.rank = 0</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Weave Trainer Echo</name>
				<packageName></packageName>
				<script>function weave_trainer:echo(what, debug, err)
  local weave_trainer_tag = "&lt;white&gt;(&lt;gray&gt;weave_trainer&lt;white&gt;): &lt;white&gt;"
  local debug_tag = "&lt;deep_sky_blue&gt;(&lt;royal_blue&gt;debug&lt;deep_sky_blue&gt;): &lt;white&gt;"
  local err_tag = "&lt;coral&gt;(&lt;red&gt;error&lt;coral&gt;): &lt;white&gt;"
  
  if debug and not self.configs.dbug then return end
  if what:sub(0,1)=="\n" then
    cecho("\n")
    what = what:sub(2)
  end
  cecho(weave_trainer_tag)
  if debug then cecho(debug_tag) end
  if err then cecho(err_tag) end
  cecho(what)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Info Label</name>
				<packageName></packageName>
				<script>weave_trainer.info =
  weave_trainer.info or
  Geyser.Label:new(
    {
      name = "weave_trainer.info",
      x = "0%",
      y = "70%",
      width = "32%",
      height = "30%",
      fgColor = "black",
      color = "white",
    },
    weave_trainer.container
  )
weave_trainer.info:setFontSize(10)
weave_trainer.info:setStyleSheet([[
  qproperty-wordWrap: true;
]])
weave_trainer.info:echo(
  [[
Click the green "+" buttons to increment a practice.&lt;br&gt;
&lt;br&gt;
Click the red "-" buttons to decrement a practice.&lt;br&gt;
&lt;br&gt;
Scroll with your mouse on the gray practice value boxes and character int/rank boxes to increment and decrement.&lt;br&gt;
&lt;br&gt;
Weaves with black borders can only be practiced by clanned characters.&lt;br&gt;
&lt;br&gt;
Practice setups can be saved or loaded using the input bars to the right.
]]
)</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Reset Pracs</name>
				<packageName></packageName>
				<script>weave_trainer["reset_pracs_label"] =
  weave_trainer["reset_pracs_label"] or
  Geyser.Label:new(
    {
      name = "weave_trainer.reset_pracs_label",
      x = "90%",
      y = "83%",
      width = "10%",
      height = "5%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;Reset&lt;/center&gt;]],
    },
    weave_trainer.container
  )
weave_trainer["reset_pracs_label"]:setStyleSheet([[
  background-color: gray;
  border-width: 3px;
  border-style: solid;
  border-color: gray;
  border-radius: 3px;
]]) 
weave_trainer["reset_pracs_label"]:setClickCallback("weave_trainer:reset_pracs")

function weave_trainer:reset_pracs()
  for _, element in pairs(self.pracs.elements) do
    self.elements.pracs[element] = 0
  end
  for _, weave in pairs(self.pracs.weaves) do
    self.weaves.pracs[weave] = 0
  end
  self:update_displays()
end</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Save and Load File</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Save and Load file</name>
					<packageName></packageName>
					<script>weave_trainer.file = {}
weave_trainer.file.save_label =
  weave_trainer.file.save_label or
  Geyser.Label:new(
    {
      name = "weave_trainer.file.save_label",
      x = "32%",
      y = "90%",
      width = "30%",
      height = "5%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;Type filename and press enter to save:&lt;/center&gt;]],
    },
    weave_trainer.container
  )
weave_trainer.file.save_name =
  weave_trainer.file.save_name or
  Geyser.CommandLine:new(
    {
      name = "weave_trainer.file.save_name",
      x = "62%",
      y = "90%",
      width = "38%",
      height = "5%",
      stylesheet = "border: 1px solid silver;",
    },
    weave_trainer.container
  )
weave_trainer.file.save_name:setAction(
  function(commandLineInput)
    weave_trainer:save_pracs(commandLineInput)
  end
)

weave_trainer.file.load_label =
  weave_trainer.file.load_label or
  Geyser.Label:new(
    {
      name = "weave_trainer.file.load_label",
      x = "32%",
      y = "95%",
      width = "30%",
      height = "5%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;Type filename and press enter to load:&lt;/center&gt;]],
    },
    weave_trainer.container
  )
weave_trainer.file.load_name =
  weave_trainer.file.load_name  or
  Geyser.CommandLine:new(
    {
      name = "weave_trainer.file.load_name ",
      x = "62%",
      y = "95%",
      width = "38%",
      height = "5%",
      stylesheet = "border: 1px solid silver;",
    },
    weave_trainer.container
  )
weave_trainer.file.load_name:setAction(
  function(commandLineInput)
    weave_trainer:load_pracs(commandLineInput)
    weave_trainer:update_displays()
  end
)


--hide the practice trainer after final item has been created,
--otherwise the command line will show
weave_trainer.container:hide()</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Save and Load Functions</name>
					<packageName></packageName>
					<script>function weave_trainer:save_pracs(fname)
  if not io.exists(getMudletHomeDir() .. "/weave_trainer") then
    lfs.mkdir(getMudletHomeDir() .. "/weave_trainer")
  end
  if fname == "" then
    self:echo("No filename provided.\n", false, true)
    return
  end
  if self:pracs_to_level() &gt; 51 then
    self:echo("More than 51 levels required. Cannot save practice setup.\n", false, true)
    return
  end
  local out_table = {
    int = self.stats.int,
    rank = self.stats.rank,
    elements = table.deepcopy(self.elements.pracs),
    weaves = table.deepcopy(self.weaves.pracs)
  }
  local out_file = getMudletHomeDir() .. "/weave_trainer/" .. fname .. ".lua"
  self:echo("Saving practices to "..out_file.."\n")
  table.save(out_file, out_table)
  self:echo("Practices saved.\n")
end

function weave_trainer:load_pracs(fname)
  local in_file = getMudletHomeDir() .. "/weave_trainer/" .. fname .. ".lua"
  if not io.exists(in_file) then
    self:echo("File "..in_file.." does not exist.\n",false,true)
    return
  end
  
  local in_table = {}
  
  self:echo("Loading practices from "..in_file.."\n")
  table.load(in_file, in_table)
  
  self.stats.int = in_table.int
  self.stats.rank = in_table.rank
  self.elements.pracs = table.deepcopy(in_table.elements)
  self.weaves.pracs = table.deepcopy(in_table.weaves)
    
  self:echo("Practices loaded.\n")
  
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<Script isActive="yes" isFolder="no">
				<name>Practices</name>
				<packageName></packageName>
				<script>weave_trainer.pracs = weave_trainer.pracs or {}
weave_trainer.pracs.rates =
  {
    [12] = {10, 8, 5, 4, 2, 1},
    [13] = {11, 8, 6, 4, 2, 1},
    [14] = {12, 9, 7, 4, 2, 1},
    [15] = {13, 10, 7, 5, 2, 1},
    [16] = {14, 11, 8, 5, 2, 1},
    [17] = {15, 12, 8, 6, 3, 1},
    [18] = {16, 12, 9, 6, 3, 1},
    [19] = {17, 13, 10, 6, 3, 1},
  }
weave_trainer.pracs.elements = {"air", "earth", "fire", "spirit", "water"}
weave_trainer.pracs.weaves =
  {
    "armor",
    "blind",
    "call lightning",
    "change weather",
    "chill",
    "contagion",
    "create fog",
    "create food",
    "create phantom object",
    "create water",
    "cure blindness",
    "cure critical wounds",
    "cure fear",
    "cure light wounds",
    "cure poison",
    "cure serious wounds",
    "deafen",
    "earthquake",
    "elemental staff",
    "fear",
    "fireball",
    "flame strike",
    "freeze",
    "gate",
    "hailstorm",
    "hammer of air",
    "heal",
    "hurricane",
    "ice spikes",
    "incinerate",
    "light ball",
    "locate life",
    "locate object",
    "poison",
    "refresh",
    "remove contagion",
    "remove warding",
    "sense warding",
    "shield",
    "silence",
    "sleep",
    "slice weaves",
    "slow",
    "sonic boom",
    "strength",
    "sword of flame",
    "travel",
    "ward object",
    "warding vs damage",
    "warding vs evil",
    "whirlpool",
  }
weave_trainer.pracs.requirements =
  {
    ["armor"] = {air = 0, earth = 0, fire = 0, spirit = 2, water = 0},
    ["blind"] = {air = 0, earth = 1, fire = 1, spirit = 1, water = 0},
    ["call lightning"] = {air = 3, earth = 0, fire = 1, spirit = 0, water = 2},
    ["change weather"] = {air = 2, earth = 0, fire = 0, spirit = 0, water = 3},
    ["chill"] = {air = 0, earth = 0, fire = 0, spirit = 0, water = 1},
    ["contagion"] = {air = 0, earth = 4, fire = 0, spirit = 3, water = 0},
    ["create fog"] = {air = 2, earth = 0, fire = 0, spirit = 0, water = 3},
    ["create food"] = {air = 0, earth = 1, fire = 0, spirit = 0, water = 0},
    ["create phantom object"] = {air = 0, earth = 3, fire = 0, spirit = 0, water = 0},
    ["create water"] = {air = 0, earth = 0, fire = 0, spirit = 0, water = 1},
    ["cure blindness"] = {air = 0, earth = 0, fire = 1, spirit = 3, water = 0},
    ["cure critical wounds"] = {air = 0, earth = 1, fire = 0, spirit = 2, water = 5},
    ["cure fear"] = {air = 0, earth = 0, fire = 0, spirit = 4, water = 0},
    ["cure light wounds"] = {air = 0, earth = 1, fire = 0, spirit = 2, water = 1},
    ["cure poison"] = {air = 0, earth = 4, fire = 0, spirit = 0, water = 3},
    ["cure serious wounds"] = {air = 0, earth = 1, fire = 0, spirit = 2, water = 4},
    ["deafen"] = {air = 0, earth = 2, fire = 0, spirit = 1, water = 0},
    ["earthquake"] = {air = 0, earth = 4, fire = 0, spirit = 0, water = 0},
    ["elemental staff"] = {air = 4, earth = 0, fire = 3, spirit = 0, water = 5},
    ["fear"] = {air = 0, earth = 0, fire = 0, spirit = 2, water = 0},
    ["fireball"] = {air = 0, earth = 0, fire = 7, spirit = 0, water = 0},
    ["flame strike"] = {air = 0, earth = 0, fire = 4, spirit = 0, water = 0},
    ["freeze"] = {air = 3, earth = 0, fire = 0, spirit = 5, water = 0},
    ["gate"] = {air = 0, earth = 7, fire = 0, spirit = 4, water = 0},
    ["hailstorm"] = {air = 1, earth = 0, fire = 0, spirit = 0, water = 4},
    ["hammer of air"] = {air = 4, earth = 0, fire = 0, spirit = 0, water = 0},
    ["heal"] = {air = 0, earth = 1, fire = 0, spirit = 2, water = 6},
    ["hurricane"] = {air = 6, earth = 0, fire = 0, spirit = 0, water = 0},
    ["ice spikes"] = {air = 3, earth = 0, fire = 0, spirit = 0, water = 3},
    ["incinerate"] = {air = 0, earth = 7, fire = 7, spirit = 7, water = 0},
    ["light ball"] = {air = 1, earth = 0, fire = 1, spirit = 0, water = 0},
    ["locate life"] = {air = 2, earth = 2, fire = 0, spirit = 2, water = 4},
    ["locate object"] = {air = 2, earth = 4, fire = 0, spirit = 2, water = 0},
    ["poison"] = {air = 0, earth = 4, fire = 0, spirit = 0, water = 3},
    ["refresh"] = {air = 0, earth = 2, fire = 0, spirit = 3, water = 2},
    ["remove contagion"] = {air = 0, earth = 2, fire = 0, spirit = 2, water = 0},
    ["remove warding"] = {air = 1, earth = 1, fire = 0, spirit = 3, water = 0},
    ["sense warding"] = {air = 0, earth = 0, fire = 0, spirit = 2, water = 0},
    ["shield"] = {air = 0, earth = 0, fire = 0, spirit = 5, water = 0},
    ["silence"] = {air = 0, earth = 2, fire = 0, spirit = 1, water = 0},
    ["sleep"] = {air = 3, earth = 0, fire = 0, spirit = 5, water = 0},
    ["slice weaves"] = {air = 1, earth = 1, fire = 4, spirit = 2, water = 0},
    ["slow"] = {air = 3, earth = 0, fire = 0, spirit = 5, water = 0},
    ["sonic boom"] = {air = 3, earth = 0, fire = 1, spirit = 0, water = 2},
    ["strength"] = {air = 0, earth = 3, fire = 0, spirit = 2, water = 3},
    ["sword of flame"] = {air = 4, earth = 3, fire = 5, spirit = 0, water = 0},
    ["travel"] = {air = 0, earth = 7, fire = 0, spirit = 2, water = 0},
    ["ward object"] = {air = 0, earth = 0, fire = 0, spirit = 3, water = 0},
    ["warding vs damage"] = {air = 4, earth = 4, fire = 0, spirit = 0, water = 4},
    ["warding vs evil"] = {air = 0, earth = 0, fire = 0, spirit = 1, water = 0},
    ["whirlpool"] = {air = 0, earth = 0, fire = 0, spirit = 0, water = 5},
  }
weave_trainer.pracs.clanned =
  {
    "contagion",
    "cure critical wounds",
    "cure fear",
    "cure poison",
    "cure serious wounds",
    "elemental staff",
    "fireball",
    "flame strike",
    "freeze",
    "gate",
    "hailstorm",
    "hammer of air",
    "heal",
    "hurricane",
    "incinerate",
    "locate life",
    "locate object",
    "poison",
    "shield",
    "sleep",
    "slice weaves",
    "slow",
    "sword of flame",
    "travel",
    "warding vs damage",
    "whirlpool",
  }</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Update Information</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Update Practice</name>
					<packageName></packageName>
					<script>function weave_trainer:add_practice(skill)
  for _, element in pairs(self.pracs.elements) do
    if self.elements.pracs[element] &lt; self.pracs.requirements[skill][element] then
      self.elements.pracs[element] = self.pracs.requirements[skill][element]
    end
  end
  if self:prac_to_percent(skill, self.weaves.pracs[skill]) &lt; 99 then
    self.weaves.pracs[skill] = self.weaves.pracs[skill] + 1
  end
  if self:pracs_to_level() &gt; 51 then
    self:subtract_practice(skill)
  end
  self:update_displays()
end

function weave_trainer:subtract_practice(skill)
  if self:prac_to_percent(skill, self.weaves.pracs[skill]) &gt; 0 then
    self.weaves.pracs[skill] = self.weaves.pracs[skill] - 1
  end
  self:update_displays()
end

function weave_trainer:practice_scroll(skill, event)
  if event.angleDeltaY &gt; 0 then
    self:add_practice(skill)
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_practice(skill)
  end
end

function weave_trainer:update_practices()
  for k, v in pairs(self.pracs.weaves) do
    while self:prac_to_percent(v, self.weaves.pracs[v] - 1) == 99 do
      self.weaves.pracs[v] = self.weaves.pracs[v] - 1
    end
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Update Element</name>
					<packageName></packageName>
					<script>function weave_trainer:add_element(element)
  if self.elements.pracs[element] &lt; 7 then
    self.elements.pracs[element] = self.elements.pracs[element] + 1
  end
  if self:pracs_to_level() &gt; 51 then
    self:subtract_element(element)
  end
  self:update_displays()
end

function weave_trainer:subtract_element(element)
  if self.elements.pracs[element] &gt; 0 then
    self.elements.pracs[element] = self.elements.pracs[element] - 1
  end
  for _, skill in pairs(self.pracs.weaves) do
    if self.elements.pracs[element] &lt; self.pracs.requirements[skill][element] then
      self.weaves.pracs[skill] = 0
    end
  end
  self:update_displays()
end

function weave_trainer:element_scroll(element, event)
  if event.angleDeltaY &gt; 0 then
    self:add_element(element)
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_element(element)
  end
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Update Int</name>
					<packageName></packageName>
					<script>function weave_trainer:add_int()
  if self.stats.int &lt; 19 then
    self.stats.int = self.stats.int + 1
  end
  self:update_displays()
end

function weave_trainer:subtract_int()
  if self.stats.int &gt; 12 then
    self.stats.int = self.stats.int - 1
  end
  self:update_displays()
end

function weave_trainer:int_scroll(event)
  if event.angleDeltaY &gt; 0 then
    self:add_int()
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_int()
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Update Rank</name>
					<packageName></packageName>
					<script>function weave_trainer:add_rank()
  if self.stats.rank &lt; 9 then
    self.stats.rank = self.stats.rank + 1
  end
  self:update_displays()
end

function weave_trainer:subtract_rank()
  if self.stats.rank &gt; 0 then
    self.stats.rank = self.stats.rank - 1
  end
  self:update_displays()
end

function weave_trainer:rank_scroll(event)
  if event.angleDeltaY &gt; 0 then
    self:add_rank()
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_rank()
  end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Convert Information</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Practice to Percent</name>
					<packageName></packageName>
					<script>function weave_trainer:prac_to_percent(skill, pracs)
  local bonus = 0
  for _, element in pairs(self.pracs.elements) do
    if self.pracs.requirements[skill][element] ~= 0 then
      bonus = bonus + self.elements.pracs[element] - self.pracs.requirements[skill][element]
    end
  end
  local prac_percent = 0
  for i = 1, pracs, 1 do
    local prac_update = 0
    if prac_percent &lt; 21 then
      prac_update = math.floor(self.pracs.rates[self.stats.int][1])
    elseif prac_percent &lt; 41 then
      prac_update = math.floor(self.pracs.rates[self.stats.int][2])
    elseif prac_percent &lt; 61 then
      prac_update = math.floor(self.pracs.rates[self.stats.int][3])
    elseif prac_percent &lt; 81 then
      prac_update = math.floor(self.pracs.rates[self.stats.int][4])
    elseif prac_percent &lt; 91 then
      prac_update = math.floor(self.pracs.rates[self.stats.int][5])
    elseif prac_percent &lt; 99 then
      prac_update = math.floor(self.pracs.rates[self.stats.int][6])
    end
    if table.contains({"gate", "travel"}, skill) then
      prac_update = math.floor(0.85 * prac_update)
    elseif
      table.contains(
        {
          "create fog",
          "cure blindness",
          "cure light wounds",
          "cure poison",
          "deafen",
          "poison",
          "remove contagion",
          "sense warding",
          "silence",
          "ward object",
        },
        skill
      )
    then
      prac_update = math.floor(1.5 * prac_update)
    end
    if prac_update == 0 then
      prac_update = 1
    end
    prac_update = prac_update + math.floor(0.04 * bonus * prac_update)
    prac_update = prac_update + math.floor(0.04 * self.stats.rank * prac_update)
    prac_percent = prac_percent + prac_update
  end
  return math.min(prac_percent, 99)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Practice to Level</name>
					<packageName></packageName>
					<script>function weave_trainer:get_total_element_pracs()
  local element_totals = {air = 0, earth = 0, fire = 0, spirit = 0, water = 0}
  for _, element in pairs(self.pracs.elements) do
    element_totals[element] = self.elements.pracs[element] * (self.elements.pracs[element] + 1)
  end
  return element_totals
end

function weave_trainer:get_total_pracs()
  local num_pracs = 0
  local element_totals = self:get_total_element_pracs()
  for element, total in pairs(element_totals) do
    num_pracs = num_pracs + total
  end
  for _, skill in pairs(self.pracs.weaves) do
    num_pracs = num_pracs + self.weaves.pracs[skill]
  end
  return num_pracs
end

function weave_trainer:pracs_to_level()
  local level = 1
  local pracs = 3
  while pracs &lt; self:get_total_pracs() do
    level = level + 1
    if level &lt;= 10 then
      pracs = pracs + 3
    elseif level &lt;= 15 then
      pracs = pracs + 5
    elseif level &lt;= 25 then
      pracs = pracs + 7
    elseif level &lt;= 40 then
      pracs = pracs + 8
    else
      pracs = pracs + 2
    end
  end
  return level
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Displays</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Weave Practice Displays</name>
					<packageName></packageName>
					<script>weave_trainer.weaves = weave_trainer.weaves or {}
weave_trainer.weaves.pracs = weave_trainer.weaves.pracs or {}
for k, v in pairs(weave_trainer.pracs.weaves) do
  weave_trainer.weaves.pracs[v] = weave_trainer.weaves.pracs[v] or 0
end
weave_trainer.weaves["container1"] =
  weave_trainer.weaves["container1"] or
  Geyser.Container:new(
    {name = "weave_trainer.weaves.container1", x = "0%", y = "0%", width = "32%", height = "80%"},
    weave_trainer.container
  )
weave_trainer.weaves["container2"] =
  weave_trainer.weaves["container2"] or
  Geyser.Container:new(
    {name = "weave_trainer.weaves.container2", x = "34%", y = "0%", width = "32%", height = "80%"},
    weave_trainer.container
  )
weave_trainer.weaves["container3"] =
  weave_trainer.weaves["container3"] or
  Geyser.Container:new(
    {name = "weave_trainer.weaves.container3", x = "68%", y = "0%", width = "32%", height = "80%"},
    weave_trainer.container
  )
for k, v in pairs(weave_trainer.pracs.weaves) do
  local container_num = math.floor((k - 1) / 17) + 1
  local ypos = ((k - 1) % 17) * 5
  ypos = ypos .. "%"
  local lbl_msg = "&lt;center&gt;" .. v .. " ( "
  for _, wtype in pairs(weave_trainer.pracs.elements) do
    if weave_trainer.pracs.requirements[v][wtype] ~= 0 then
      lbl_msg =
        lbl_msg .. weave_trainer.pracs.requirements[v][wtype] .. wtype:sub(1, 1):upper() .. " "
    end
  end
  lbl_msg = lbl_msg .. ")"
  weave_trainer.weaves[v .. "_label"] =
    weave_trainer.weaves[v .. "_label"] or
    Geyser.Label:new(
      {
        name = "weave_trainer.weaves." .. v .. "_label",
        x = "0%",
        y = ypos,
        width = "70%",
        height = "5%",
        fgColor = "black",
        color = "white",
        message = lbl_msg,
      },
      weave_trainer.weaves["container" .. container_num]
    )
  if table.contains(weave_trainer.pracs.clanned, v) then
    weave_trainer.weaves[v .. "_label"]:setStyleSheet(
      [[
      background-color: white;
      border-width: 3px;
      border-style: solid;
      border-color: black;
      border-radius: 3px;
    ]]
    )
  end
  weave_trainer.weaves[v .. "_%_label"] =
    weave_trainer.weaves[v .. "_%_label"] or
    Geyser.Label:new(
      {
        name = "weave_trainer.weaves." .. v .. "_%_label",
        x = "65%",
        y = ypos,
        width = "15%",
        height = "5%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;]] .. weave_trainer.weaves.pracs[v] .. [[%&lt;/center&gt;]],
      },
      weave_trainer.weaves["container" .. container_num]
    )
  weave_trainer.weaves[v .. "_%_label"]:setStyleSheet(
    [[
      background-color: white;
      border-width: 3px;
      border-style: solid;
      border-color: gray;
      border-radius: 3px;
    ]]
  )
  setLabelWheelCallback(
    "weave_trainer.weaves." .. v .. "_%_label", "weave_trainer:practice_scroll", v
  )
  weave_trainer.weaves[v .. "_-_label"] =
    weave_trainer.weaves[v .. "_-_label"] or
    Geyser.Label:new(
      {
        name = "weave_trainer.weaves." .. v .. "_-_label",
        x = "80%",
        y = ypos,
        width = "10%",
        height = "5%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;-&lt;/center&gt;]],
      },
      weave_trainer.weaves["container" .. container_num]
    )
  weave_trainer.weaves[v .. "_-_label"]:setStyleSheet(
    [[
      background-color: white;
      border-width: 3px;
      border-style: solid;
      border-color: red;
      border-radius: 3px;
    ]]
  )
  weave_trainer.weaves[v .. "_-_label"]:setClickCallback("weave_trainer:subtract_practice", v)
  weave_trainer.weaves[v .. "_+_label"] =
    weave_trainer.weaves[v .. "_+_label"] or
    Geyser.Label:new(
      {
        name = "weave_trainer.weaves." .. v .. "_+_label",
        x = "90%",
        y = ypos,
        width = "10%",
        height = "5%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;+&lt;/center&gt;]],
      },
      weave_trainer.weaves["container" .. container_num]
    )
  weave_trainer.weaves[v .. "_+_label"]:setStyleSheet(
    [[
      background-color: white;
      border-width: 3px;
      border-style: solid;
      border-color: green;
      border-radius: 3px;
    ]]
  )
  weave_trainer.weaves[v .. "_+_label"]:setClickCallback("weave_trainer:add_practice", v)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Weave Element Displays</name>
					<packageName></packageName>
					<script>weave_trainer.elements = weave_trainer.elements or {}
weave_trainer.elements.pracs = weave_trainer.elements.pracs or {}
for k, v in pairs(weave_trainer.pracs.elements) do
  weave_trainer.elements.pracs[v] = weave_trainer.elements.pracs[v] or 0
end
weave_trainer.elements.container =
  weave_trainer.elements.container or
  Geyser.Container:new(
    {name = "weave_trainer.elements.container", x = "34%", y = "73%", width = "66%", height = "5%"},
    weave_trainer.container
  )
  
for k, element in pairs(weave_trainer.pracs.elements) do
  local xpos = (k - 1) * 20
  weave_trainer.elements[element .. "_label"] =
    weave_trainer.elements[element .. "_label"] or
    Geyser.Label:new(
      {
        name = "weave_trainer.elements." .. element .. "_label",
        x = xpos .. "%",
        y = "0%",
        width = "6%",
        height = "100%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;]] .. element .. [[&lt;/center&gt;]],
      },
      weave_trainer.elements.container
    )
  weave_trainer.elements[element .. "_val_label"] =
    weave_trainer.elements[element .. "_val_label"] or
    Geyser.Label:new(
      {
        name = "weave_trainer.elements." .. element .. "_val_label",
        x = (xpos + 6) .. "%",
        y = "0%",
        width = "5%",
        height = "100%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;]] .. weave_trainer.elements.pracs[element] .. [[&lt;/center&gt;]],
      },
      weave_trainer.elements.container
    )
  weave_trainer.elements[element .. "_val_label"]:setStyleSheet([[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: gray;
    border-radius: 3px;
  ]])
  setLabelWheelCallback("weave_trainer.elements." .. element .. "_val_label", "weave_trainer:element_scroll", element)
  
  weave_trainer.elements[element .. "_-_label"] =
    weave_trainer.elements[element .. "_-_label"] or
    Geyser.Label:new(
      {
        name = "weave_trainer.elements." .. element .. "_-_label",
        x = (xpos + 11) .. "%",
        y = "0%",
        width = "4%",
        height = "100%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;-&lt;/center&gt;]],
      },
      weave_trainer.elements.container
    )
  weave_trainer.elements[element .. "_-_label"]:setStyleSheet([[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: red;
    border-radius: 3px;
  ]])
  weave_trainer.elements[element .. "_-_label"]:setClickCallback(
    "weave_trainer:subtract_element", element
  )
  weave_trainer.elements[element .. "_+_label"] =
    weave_trainer.elements[element .. "_+_label"] or
    Geyser.Label:new(
      {
        name = "weave_trainer.elements." .. element .. "_+_label",
        x = (xpos + 15) .. "%",
        y = "0%",
        width = "4%",
        height = "100%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;+&lt;/center&gt;]],
      },
      weave_trainer.elements.container
    )
  weave_trainer.elements[element .. "_+_label"]:setStyleSheet([[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: green;
    border-radius: 3px;
  ]])
  weave_trainer.elements[element .. "_+_label"]:setClickCallback("weave_trainer:add_element", element)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Character Stats Displays</name>
					<packageName></packageName>
					<script>weave_trainer.stats.container =
  weave_trainer.stats.container or
  Geyser.Container:new(
    {name = "weave_trainer.stats.container", x = "34%", y = "83%", width = "56%", height = "5%"},
    weave_trainer.container
  )
weave_trainer.stats["int_label"] =
  weave_trainer.stats["int_label"] or
  Geyser.Label:new(
    {
      name = "weave_trainer.stats.int_label",
      x = "0%",
      y = "0%",
      width = "6%",
      height = "100%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;int&lt;/center&gt;]],
    },
    weave_trainer.stats.container
  )
weave_trainer.stats["int_val_label"] =
  weave_trainer.stats["int_val_label"] or
  Geyser.Label:new(
    {
      name = "weave_trainer.stats.int_val_label",
      x = "6%",
      y = "0%",
      width = "5%",
      height = "100%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;]] .. weave_trainer.stats.int .. [[&lt;/center&gt;]],
    },
    weave_trainer.stats.container
  )
weave_trainer.stats["int_val_label"]:setStyleSheet(
  [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: gray;
    border-radius: 3px;
  ]]
)
setLabelWheelCallback("weave_trainer.stats.int_val_label", "weave_trainer:int_scroll")
weave_trainer.stats["int_-_label"] =
  weave_trainer.stats["int_-_label"] or
  Geyser.Label:new(
    {
      name = "weave_trainer.stats.int_-_label",
      x = "11%",
      y = "0%",
      width = "4%",
      height = "100%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;-&lt;/center&gt;]],
    },
    weave_trainer.stats.container
  )
weave_trainer.stats["int_-_label"]:setStyleSheet(
  [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: red;
    border-radius: 3px;
  ]]
)
weave_trainer.stats["int_-_label"]:setClickCallback("weave_trainer:subtract_int")
weave_trainer.stats["int_+_label"] =
  weave_trainer.stats["int_+_label"] or
  Geyser.Label:new(
    {
      name = "weave_trainer.stats.int_+_label",
      x = "15%",
      y = "0%",
      width = "4%",
      height = "100%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;+&lt;/center&gt;]],
    },
    weave_trainer.stats.container
  )
weave_trainer.stats["int_+_label"]:setStyleSheet(
  [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: green;
    border-radius: 3px;
  ]]
)
weave_trainer.stats["int_+_label"]:setClickCallback("weave_trainer:add_int")
weave_trainer.stats["rank_label"] =
  weave_trainer.stats["rank_label"] or
  Geyser.Label:new(
    {
      name = "weave_trainer.stats.rank_label",
      x = "19%",
      y = "0%",
      width = "6%",
      height = "100%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;rank&lt;/center&gt;]],
    },
    weave_trainer.stats.container
  )
weave_trainer.stats["rank_val_label"] =
  weave_trainer.stats["rank_val_label"] or
  Geyser.Label:new(
    {
      name = "weave_trainer.stats.rank_val_label",
      x = "25%",
      y = "0%",
      width = "5%",
      height = "100%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;]] .. weave_trainer.stats.rank .. [[&lt;/center&gt;]],
    },
    weave_trainer.stats.container
  )
weave_trainer.stats["rank_val_label"]:setStyleSheet(
  [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: gray;
    border-radius: 3px;
  ]]
)
setLabelWheelCallback("weave_trainer.stats.rank_val_label", "weave_trainer:rank_scroll")
weave_trainer.stats["rank_-_label"] =
  weave_trainer.stats["rank_-_label"] or
  Geyser.Label:new(
    {
      name = "weave_trainer.stats.rank_-_label",
      x = "30%",
      y = "0%",
      width = "4%",
      height = "100%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;-&lt;/center&gt;]],
    },
    weave_trainer.stats.container
  )
weave_trainer.stats["rank_-_label"]:setStyleSheet(
  [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: red;
    border-radius: 3px;
  ]]
)
weave_trainer.stats["rank_-_label"]:setClickCallback("weave_trainer:subtract_rank")
weave_trainer.stats["rank_+_label"] =
  weave_trainer.stats["rank_+_label"] or
  Geyser.Label:new(
    {
      name = "weave_trainer.stats.rank_+_label",
      x = "34%",
      y = "0%",
      width = "4%",
      height = "100%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;+&lt;/center&gt;]],
    },
    weave_trainer.stats.container
  )
weave_trainer.stats["rank_+_label"]:setStyleSheet(
  [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: green;
    border-radius: 3px;
  ]]
)
weave_trainer.stats["rank_+_label"]:setClickCallback("weave_trainer:add_rank")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Total Practice and Level Displays</name>
					<packageName></packageName>
					<script>weave_trainer.stats["total_pracs_label"] =
    weave_trainer.stats["total_pracs_label"] or
    Geyser.Label:new(
      {
        name = "weave_trainer.stats.total_pracs_label",
        x = "38%",
        y = "0%",
        width = "26%",
        height = "100%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;Practices required: ]] .. weave_trainer:get_total_pracs() .. [[&lt;/center&gt;]],
      },
      weave_trainer.stats.container
    )
    
weave_trainer.stats["level_label"] =
    weave_trainer.stats["level_label"] or
    Geyser.Label:new(
      {
        name = "weave_trainer.stats.level_label",
        x = "64%",
        y = "0%",
        width = "26%",
        height = "100%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;Levels required: ]] .. weave_trainer:pracs_to_level() .. [[&lt;/center&gt;]],
      },
      weave_trainer.stats.container
    )
</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<Script isActive="yes" isFolder="no">
				<name>Update Displays</name>
				<packageName></packageName>
				<script>function weave_trainer:update_element_display()
  for _, element in pairs(self.pracs.elements) do
    self.elements[element .. "_val_label"]:echo("&lt;center&gt;" .. self.elements.pracs[element])
  end
end

function weave_trainer:update_prac_display()
  for k, v in pairs(self.pracs.weaves) do
    self.weaves[v .. "_%_label"]:echo(
      "&lt;center&gt;" .. self:prac_to_percent(v, self.weaves.pracs[v]) .. "%"
    )
  end
end

function weave_trainer:update_total_pracs_display()
  self.stats["total_pracs_label"]:echo(
    "&lt;center&gt;Practices required: " .. weave_trainer:get_total_pracs()
  )
end

function weave_trainer:update_levels_display()
  self.stats["level_label"]:echo("&lt;center&gt;Levels required: " .. weave_trainer:pracs_to_level())
end

function weave_trainer:update_int_rank_display()
  self.stats["int_val_label"]:echo("&lt;center&gt;" .. self.stats.int)
  self.stats["rank_val_label"]:echo("&lt;center&gt;" .. self.stats.rank)
end

function weave_trainer:update_displays()
  self:update_practices()
  self:update_int_rank_display()
  self:update_element_display()
  self:update_prac_display()
  self:update_total_pracs_display()
  self:update_levels_display()
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
