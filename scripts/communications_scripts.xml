<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Communications</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------</script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Shared</name>
				<packageName></packageName>
				<script>--Bootstrapping variables/etc. Don't touch this unless you really know what you're doing
--I mean it. I'll point. AND laugh. loudly.
communications = communications or {}
communications.config = communications.config or {}
communications.balances = communications.balances or {}
communications.balances.balance = communications.balances.balance or 1
communications.balances.equilibrium = communications.balances.equilibrium or 1
communications.debug = communications.debug or {}
communications.debug.active = communications.debug.active or nil
communications.debug.categories = communications.debug.categories or {}

function communications:echo(msg)
  cecho(string.format("\n&lt;blue&gt;(&lt;green&gt;Communications&lt;blue&gt;):&lt;white&gt; %s", msg))
end</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Debugging</name>
					<packageName></packageName>
					<script>--Adds debugging functionality

function communications:Debug(category, debugData)
  if category then
    if table.contains(communications.debug.categories, category) then
      if type(debugData) == "table" then
        communications:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt;")
        display(debugData)
      elseif type(debugData) == "string" or type(debugData) == "number" then
        communications:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt; " .. debugData .. "\n")
      else
        communications:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt; " .. tostring(debugData) .. "\n")
      end
    end
  else
    if type(debugData) == "table" then
      communications:echo("&lt;red&gt;DEBUG:&lt;white&gt;")
      display(debugData)
    elseif type(debugData) == "string" or type(debugData) == "number" then
      communications:echo("&lt;red&gt;DEBUG:&lt;white&gt; " .. debugData)
    else
      communications:echo("&lt;red&gt;DEBUG:&lt;white&gt; " .. tostring(debugData))
    end
  end
end

function communications:printDebug(category, debugData)
  if not communications.debug.active then
    return
  end
  communications:Debug(category, debugData)
end

function communications:toggleDebug()
  if communications.debug.active then
    communications.debug.active = nil
  else
    communications.debug.active = true
  end
  communications:echo(
    "Debugging is currently " ..
    ((communications.debug.active and "&lt;green&gt;ON&lt;white&gt;") or "&lt;red&gt;OFF&lt;white&gt;")
  )
end

function communications:watchCategory(category)
  if table.contains(communications.debug.categories, category) then
    for i, v in ipairs(communications.debug.categories) do
      if v == category then
        table.remove(communications.debug.categories, i)
      end
    end
    communications:echo("No longer watching the '&lt;red&gt;" .. category .. "&lt;white&gt;' category.")
  else
    table.insert(communications.debug.categories, category)
    communications:echo("Now watching the '&lt;red&gt;" .. category .. "&lt;white&gt;' category.")
  end
  communications:echo(
    "Debugging is currently " ..
    ((communications.debug.active and "&lt;green&gt;ON&lt;white&gt;") or "&lt;red&gt;OFF&lt;white&gt;")
  )
end

function communications:listCategories()
  if #communications.debug.categories &gt; 0 then
    communications:echo(
      "You are currently watching the following categories:\n" ..
      table.concat(communications.debug.categories, ", ")
    )
  else
    communications:echo("You are not watching any debugs.")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>communicationsVitals</name>
					<packageName></packageName>
					<script>--Set some vital statistics. Will work with both ATCP and GMCP.

function communicationsVitals(msg, arg)
  communications.nextLevel = tonumber(gmcp.Char.Vitals.nl)
  communications.curHealth = tonumber(gmcp.Char.Vitals.hp)
  communications.maxHealth = tonumber(gmcp.Char.Vitals.maxhp)
  communications.curMana = tonumber(gmcp.Char.Vitals.mp)
  communications.maxMana = tonumber(gmcp.Char.Vitals.maxmp)
  communications.curEgo = tonumber(gmcp.Char.Vitals.ego)
  communications.maxEgo = tonumber(gmcp.Char.Vitals.maxego)
  communications.curPower = tonumber(gmcp.Char.Vitals.pow)
  communications.maxPower = tonumber(gmcp.Char.Vitals.maxpow)
  communications.curWillpower = tonumber(gmcp.Char.Vitals.wp)
  communications.maxWillpower = tonumber(gmcp.Char.Vitals.maxwp)
  communications.curEndurance = tonumber(gmcp.Char.Vitals.ep)
  communications.maxEndurance = tonumber(gmcp.Char.Vitals.maxep)
end</script>
					<eventHandlerList>
						<string>gmcp.Char</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Align</name>
					<packageName></packageName>
					<script>function align(str, options)
  --str is a string, options is a table
  --[[ If they sent anything but a table as the second argument, return useful
info. But if they didn't send a second argument then that's ok, the defaults
will be enough to get by and just center the txt
]]
  --
  if (type(options) ~= "table") and (options ~= nil) then
    return
      "You call this with align(\"some text to format\", &lt;table of options&gt;. Pls check comments for what options and usage information"
  end
  options = options or {}
  --if they sent options, don't overwrite them
  options.width = options.width or 80
  --default line length of 80
  options.alignment = options.alignment or "center"
  --if we don't specify, it's centered
  options.cap = options.cap or ""
  --default endcap of nothing (an empty string, technically)
  options.spacer = options.spacer or " "
  --default spacer is.. well.. space
  options.inside = options.inside or false
  --by default, when centering, formation as spacers|cap|text|cap|spacers
  if not options.mirror == false then
    options.mirror = options.mirror or true
  end
  --by default, we do want to use mirroring for the caps
  local strLen = string.len(str)
  local leftCap = options.cap
  local rightCap = options.cap
  local leftPadLen = math.floor((options.width - strLen) / 2, 1) - 1
  local rightPadLen = leftPadLen + ((options.width - strLen) % 2)
  local maxPad = 0
  local capLen = string.len(options.cap)
  if capLen &gt; leftPadLen then
    --if the cap is bigger than the left total padding
    options.cap = options.cap:sub(1, leftPadLen)
    -- trim it up right!
    capLen = string.len(options.cap)
  end
  --otherwise, don't mess with it
  if options.alignment == "center" then
    --we're going to center something
    leftPadLen = math.floor((options.width - strLen) / 2, 1) - 1
    --get the padding needed on the left
    rightPadLen = leftPadLen + ((options.width - strLen) % 2)
    --and on the right
    if options.mirror then
      --if we're reversing the left cap and the right cap (IE {{[[ turns into ]]}} )
      rightCap = string.gsub(rightCap, "&lt;", "&gt;")
      rightCap = string.gsub(rightCap, "%[", "%]")
      rightCap = string.gsub(rightCap, "{", "}")
      rightCap = string.gsub(rightCap, "%(", "%)")
      rightCap = string.reverse(rightCap)
    end
    --otherwise, they'll be the same, so don't do anything
    str = string.format(" %s ", str)
  elseif options.alignment == "right" then
    --we'll right-align the text
    leftPadLen = options.width - strLen - 1
    rightPadLen = 0
    rightCap = ""
    str = string.format(" %s", str)
  else
    --Ok, so if it's not center or right, we assume it's left. We don't do justified. Sorry.
    leftPadLen = 0
    rightPadLen = options.width - strLen - 1
    leftCap = ""
    str = string.format("%s ", str)
  end
  --that's it, took care of both left, right, and center formattings, now to output the durn thing.
  if options.inside then
    --if we're placing the repated spacer inside
    --"=====endcap some text endcap====="
    --"=====endcap some text pacdne====="
    --"=================endcap some text"
    --"some text endcap================="
    return
      leftCap ..
      string.rep(options.spacer, (leftPadLen - capLen)) ..
      str ..
      string.rep(options.spacer, (rightPadLen - capLen)) ..
      rightCap
  else
    --otherwise, it''s be the spaces on the 'inside'
    -- "endcap===== some text =====endcap"
    -- "endcap===== some text =====pacdne"
    -- "endcap================= some text"
    -- "some text =================endcap"
    return
      string.rep(options.spacer, (leftPadLen - capLen)) ..
      leftCap ..
      str ..
      rightCap ..
      string.rep(options.spacer, (rightPadLen - capLen))
  end
end

function calign(str, options)
  --str is a string, options is a table
  --[[ If they sent anything but a table as the second argument, return useful 
info. But if they didn't send a second argument then that's ok, the defaults 
will be enough to get by and just center the txt
]]
  --
  if (not type(options) == "table") and (not options == nil) then
    return
      "You call this with align(\"some text to format\", &lt;table of options&gt;. Pls check comments for what options and usage information"
  end
  options = options or {}
  --if they sent options, don't overwrite them
  options.width = options.width or 80
  --default line length of 80
  options.alignment = options.alignment or "center"
  --if we don't specify, it's centered
  options.cap = options.cap or ""
  --default endcap of nothing (an empty string, technically)
  options.spacer = options.spacer or " "
  --default spacer is.. well.. space
  options.inside = options.inside or false
  --by default, when centering, formation as spacers|cap|text|cap|spacers
  options.capColor = options.capColor or "&lt;white&gt;"
  --by default, don't change the color of the caps
  options.spacerColor = options.spacerColor or "&lt;white&gt;"
  options.textColor = options.textColor or "&lt;white&gt;"
  --or the text
  if not options.mirror == false then
    options.mirror = options.mirror or true
  end
  --by default, we do want to use mirroring for the caps
  local strLen = string.len(str)
  local leftCap = options.cap
  local rightCap = options.cap
  local leftPadLen = math.floor((options.width - strLen) / 2, 1) - 1
  local rightPadLen = leftPadLen + ((options.width - strLen) % 2)
  local maxPad = 0
  local capLen = string.len(options.cap)
  if capLen &gt; leftPadLen then
    --if the cap is bigger than the left total padding
    options.cap = options.cap:sub(1, leftPadLen)
    -- trim it up right!
    capLen = string.len(options.cap)
  end
  --otherwise, don't mess with it
  if options.alignment == "center" then
    --we're going to center something
    leftPadLen = math.floor((options.width - strLen) / 2, 1) - 1
    --get the padding needed on the left
    rightPadLen = leftPadLen + ((options.width - strLen) % 2)
    --and on the right
    if options.mirror then
      --if we're reversing the left cap and the right cap (IE {{[[ turns into ]]}} )
      rightCap = string.gsub(rightCap, "&lt;", "&gt;")
      rightCap = string.gsub(rightCap, "%[", "%]")
      rightCap = string.gsub(rightCap, "{", "}")
      rightCap = string.gsub(rightCap, "%(", "%)")
      rightCap = string.reverse(rightCap)
    end
    --otherwise, they'll be the same, so don't do anything
    str = string.format(" %s ", str)
  elseif options.alignment == "right" then
    --we'll right-align the text
    leftPadLen = options.width - strLen - 1
    rightPadLen = 0
    rightCap = ""
    str = string.format(" %s", str)
  else
    --Ok, so if it's not center or right, we assume it's left. We don't do justified. Sorry.
    leftPadLen = 0
    rightPadLen = options.width - strLen - 1
    leftCap = ""
    str = string.format("%s ", str)
  end
  --that's it, took care of both left, right, and center formattings, now to output the durn thing.
  if options.inside then
    --if we're placing the repated spacer inside
    --"=====endcap some text endcap====="
    --"=====endcap some text pacdne====="
    --"=================endcap some text"
    --"some text endcap================="
    return
      options.capColor ..
      leftCap ..
      options.spacerColor ..
      string.rep(options.spacer, (leftPadLen - capLen)) ..
      options.textColor ..
      str ..
      options.spacerColor ..
      string.rep(options.spacer, (rightPadLen - capLen)) ..
      options.capColor ..
      rightCap
  else
    --otherwise, it''s be the spaces on the 'inside'
    -- "endcap===== some text =====endcap"
    -- "endcap===== some text =====pacdne"
    -- "endcap================= some text"
    -- "some text =================endcap"
    return
      options.spacerColor ..
      string.rep(options.spacer, (leftPadLen - capLen)) ..
      options.capColor ..
      leftCap ..
      options.textColor ..
      str ..
      options.capColor ..
      rightCap ..
      options.spacerColor ..
      string.rep(options.spacer, (rightPadLen - capLen))
  end
end

function dalign(str, options)
  --str is a string, options is a table
  --[[ If they sent anything but a table as the second argument, return useful 
info. But if they didn't send a second argument then that's ok, the defaults 
will be enough to get by and just center the txt
]]
  --
  if (not type(options) == "table") and (not options == nil) then
    return
      "You call this with align(\"some text to format\", &lt;table of options&gt;. Pls check comments for what options and usage information"
  end
  options = options or {}
  --if they sent options, don't overwrite them
  options.width = options.width or 80
  --default line length of 80
  options.alignment = options.alignment or "center"
  --if we don't specify, it's centered
  options.cap = options.cap or ""
  --default endcap of nothing (an empty string, technically)
  options.spacer = options.spacer or " "
  --default spacer is.. well.. space
  options.inside = options.inside or false
  --by default, when centering, formation as spacers|cap|text|cap|spacers
  options.capColor = options.capColor or "&lt;255,255,255&gt;"
  --by default, don't change the color of the caps
  options.spacerColor = options.spacerColor or "&lt;255,255,255&gt;"
  options.textColor = options.textColor or "&lt;255,255,255&gt;"
  --or the text
  if not options.mirror == false then
    options.mirror = options.mirror or true
  end
  --by default, we do want to use mirroring for the caps
  local strLen = string.len(str)
  local leftCap = options.cap
  local rightCap = options.cap
  local leftPadLen = math.floor((options.width - strLen) / 2, 1) - 1
  local rightPadLen = leftPadLen + ((options.width - strLen) % 2)
  local maxPad = 0
  local capLen = string.len(options.cap)
  if capLen &gt; leftPadLen then
    --if the cap is bigger than the left total padding
    options.cap = options.cap:sub(1, leftPadLen)
    -- trim it up right!
    capLen = string.len(options.cap)
  end
  --otherwise, don't mess with it
  if options.alignment == "center" then
    --we're going to center something
    leftPadLen = math.floor((options.width - strLen) / 2, 1) - 1
    --get the padding needed on the left
    rightPadLen = leftPadLen + ((options.width - strLen) % 2)
    --and on the right
    if options.mirror then
      --if we're reversing the left cap and the right cap (IE {{[[ turns into ]]}} )
      rightCap = string.gsub(rightCap, "&lt;", "&gt;")
      rightCap = string.gsub(rightCap, "%[", "%]")
      rightCap = string.gsub(rightCap, "{", "}")
      rightCap = string.gsub(rightCap, "%(", "%)")
      rightCap = string.reverse(rightCap)
    end
    --otherwise, they'll be the same, so don't do anything
    str = string.format(" %s ", str)
  elseif options.alignment == "right" then
    --we'll right-align the text
    leftPadLen = options.width - strLen - 1
    rightPadLen = 0
    rightCap = ""
    str = string.format(" %s", str)
  else
    --Ok, so if it's not center or right, we assume it's left. We don't do justified. Sorry.
    leftPadLen = 0
    rightPadLen = options.width - strLen - 1
    leftCap = ""
    str = string.format("%s ", str)
  end
  --that's it, took care of both left, right, and center formattings, now to output the durn thing.
  if options.inside then
    --if we're placing the repated spacer inside
    --"=====endcap some text endcap====="
    --"=====endcap some text pacdne====="
    --"=================endcap some text"
    --"some text endcap================="
    return
      options.capColor ..
      leftCap ..
      options.spacerColor ..
      string.rep(options.spacer, (leftPadLen - capLen)) ..
      options.textColor ..
      str ..
      options.spacerColor ..
      string.rep(options.spacer, (rightPadLen - capLen)) ..
      options.capColor ..
      rightCap
  else
    --otherwise, it''s be the spaces on the 'inside'
    -- "endcap===== some text =====endcap"
    -- "endcap===== some text =====pacdne"
    -- "endcap================= some text"
    -- "some text =================endcap"
    return
      options.spacerColor ..
      string.rep(options.spacer, (leftPadLen - capLen)) ..
      options.capColor ..
      leftCap ..
      options.textColor ..
      str ..
      options.capColor ..
      rightCap ..
      options.spacerColor ..
      string.rep(options.spacer, (rightPadLen - capLen))
  end
end

function halign(str, options)
  --str is a string, options is a table
  --[[ If they sent anything but a table as the second argument, return useful 
info. But if they didn't send a second argument then that's ok, the defaults 
will be enough to get by and just center the txt
]]
  --
  if (not type(options) == "table") and (not options == nil) then
    return
      "You call this with align(\"some text to format\", &lt;table of options&gt;. Pls check comments for what options and usage information"
  end
  options = options or {}
  --if they sent options, don't overwrite them
  options.width = options.width or 80
  --default line length of 80
  options.alignment = options.alignment or "center"
  --if we don't specify, it's centered
  options.cap = options.cap or ""
  --default endcap of nothing (an empty string, technically)
  options.spacer = options.spacer or " "
  --default spacer is.. well.. space
  options.inside = options.inside or false
  --by default, when centering, formation as spacers|cap|text|cap|spacers
  options.capColor = options.capColor or "|cFFFFFF"
  --by default, don't change the color of the caps
  options.spacerColor = options.spacerColor or "|cFFFFFF"
  options.textColor = options.textColor or "|cFFFFFF"
  --or the text
  if not options.mirror == false then
    options.mirror = options.mirror or true
  end
  --by default, we do want to use mirroring for the caps
  local strLen = string.len(str)
  local leftCap = options.cap
  local rightCap = options.cap
  local leftPadLen = math.floor((options.width - strLen) / 2, 1) - 1
  local rightPadLen = leftPadLen + ((options.width - strLen) % 2)
  local maxPad = 0
  local capLen = string.len(options.cap)
  if capLen &gt; leftPadLen then
    --if the cap is bigger than the left total padding
    options.cap = options.cap:sub(1, leftPadLen)
    -- trim it up right!
    capLen = string.len(options.cap)
  end
  --otherwise, don't mess with it
  if options.alignment == "center" then
    --we're going to center something
    leftPadLen = math.floor((options.width - strLen) / 2, 1) - 1
    --get the padding needed on the left
    rightPadLen = leftPadLen + ((options.width - strLen) % 2)
    --and on the right
    if options.mirror then
      --if we're reversing the left cap and the right cap (IE {{[[ turns into ]]}} )
      rightCap = string.gsub(rightCap, "&lt;", "&gt;")
      rightCap = string.gsub(rightCap, "%[", "%]")
      rightCap = string.gsub(rightCap, "{", "}")
      rightCap = string.gsub(rightCap, "%(", "%)")
      rightCap = string.reverse(rightCap)
    end
    --otherwise, they'll be the same, so don't do anything
    str = string.format(" %s ", str)
  elseif options.alignment == "right" then
    --we'll right-align the text
    leftPadLen = options.width - strLen - 1
    rightPadLen = 0
    rightCap = ""
    str = string.format(" %s", str)
  else
    --Ok, so if it's not center or right, we assume it's left. We don't do justified. Sorry.
    leftPadLen = 0
    rightPadLen = options.width - strLen - 1
    leftCap = ""
    str = string.format("%s ", str)
  end
  --that's it, took care of both left, right, and center formattings, now to output the durn thing.
  if options.inside then
    --if we're placing the repated spacer inside
    --"=====endcap some text endcap====="
    --"=====endcap some text pacdne====="
    --"=================endcap some text"
    --"some text endcap================="
    return
      options.capColor ..
      leftCap ..
      options.spacerColor ..
      string.rep(options.spacer, (leftPadLen - capLen)) ..
      options.textColor ..
      str ..
      options.spacerColor ..
      string.rep(options.spacer, (rightPadLen - capLen)) ..
      options.capColor ..
      rightCap
  else
    --otherwise, it''s be the spaces on the 'inside'
    -- "endcap===== some text =====endcap"
    -- "endcap===== some text =====pacdne"
    -- "endcap================= some text"
    -- "some text =================endcap"
    return
      options.spacerColor ..
      string.rep(options.spacer, (leftPadLen - capLen)) ..
      options.capColor ..
      leftCap ..
      options.textColor ..
      str ..
      options.capColor ..
      rightCap ..
      options.spacerColor ..
      string.rep(options.spacer, (rightPadLen - capLen))
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Geyser Additions</name>
					<packageName></packageName>
					<script>function Geyser.MiniConsole:clear()
  clearWindow(self.name)
end

function Geyser.MiniConsole:append()
  appendBuffer(self.name)
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Tabbed Chat</name>
				<packageName></packageName>
				<script>--Do not remove the following lines. Or change them.
communications = communications or {}
communications.chat = communications.chat or {}
communications.chat.tabsToBlink = communications.chat.tabsToBlink or {}
communications.chat.config = communications.chat.config or {}
communications.chat.tabs = communications.chat.tabs or {}
communications.chat.windows = communications.chat.windows or {}
communications.chat.config.activeColors = communications.chat.config.activeColors or {}
communications.chat.config.inactiveColors = communications.chat.config.inactiveColors or {}</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Configuration Options</name>
					<packageName></packageName>
					<script>--[[
This is where all of the configuration options can be set. 
Anything I've put in this script object can be changed, but please do pay attention to what you're doing.
If you change one of the values to something it shouldn't be, you could break it. 
]]
--This is where you tell it to use tabbed chat.
communications.chat.use = true
--[[
The timestamp option is set here.
Set to false if you do not want any timestamps displayed for chat.
If you do want it displayed, set to the string for the format you wish. 
see http://wiki.mudlet.org/w/Manual:Lua_Functions#getTime for information
how to format the string
]]
communications.chat.config.timestamp = "HH:mm"
--[[ Should we use our own colors for the timestamp?
Set to true if you want to specify foreground and background colors
for the timestamp.
Set to false if you want the timestamps background and foreground
colors to match that of the mud output.
]]
communications.chat.config.timestampCustomColor = true
--[[
and what foreground color? You can either use one of the 'named' colors
(see http://wiki.mudlet.org/images/c/c3/ShowColors.png for available colors)
communications.chat.config.timestampFG = "slate_grey"

Or you can use a table of R,G,B values. 
communications.chat.config.timestampFG = {
   	 0,
    0,
    0,
}
then the foreground for the timestamp would be 255 read, 100 green, and 0 blue
]]
communications.chat.config.timestampFG = "white"
--and background? Same rules as for the foreground above
communications.chat.config.timestampBG = "black"
--[[
This is where you say what corner of the screen you want the tabbed chat on
Valid settings are "topright", "topleft", "bottomright", "bottomleft"
]]
--
communications.chat.config.location = "bottomright"
--[[
This is a table of channels you would like.
AKA the place you tell the script what tabs you want.
Each entry must be a string. The defaults should be a pretty effective guide.
]]
communications.chat.config.channels = {"All", "Narrates", "Chats", "Tells", "Says", "Yells", "Misc"}
--Set this to the name of the channel you want to have everything sent to.
--Per the default, this would be the "All" channel. If you have a different name for it:
--
--communications.chat.config.Alltab = "Bucket"
--
--And if you don't want it turned on at all:
--
--communications.chat.config.Alltab = false
communications.chat.config.Alltab = "All"
---------------------------------------------------------------------------------
--                                                                             --
--The infamous blinking stuff!!!                                               --
--                                                                             --
---------------------------------------------------------------------------------
--[[
Do you want tabs to blink when you get new messages, until you click on the tab?
True if yes, false if no.
]]
communications.chat.config.blink = false
--How long (in seconds) between blinks? For example, 1 would mean a 1 second pause in between blinks.
communications.chat.config.blinkTime = 3
--Blink if the bucket tab ("All" by default, but configured above) is in focus?
communications.chat.config.blinkFromAll = false
--Font size for the chat messages
communications.chat.config.fontSize = 10
--[[
Should we preserve the formatting of the text. 
Or should we set the background of it to match the window color?
Set this to false if you want the background for all chat to match the background of the window.
Useful if you change the background from black, and don't like the way the pasted chat makes blocks in it
]]
communications.chat.config.preserveBackground = false
--[[
Gag the chat lines in the main window?
defaults to false, set to true if you want to gag.
]]
communications.chat.config.gag = false
--[[
Number of lines of chat visible at once. 
Will determine how tall the window for the chats is.
]]
communications.chat.config.lines = 9
--[[
Number of characters to wrap the chatlines at.
This will also determine how wide the chat windows are.
]]
communications.chat.config.width = 70
--[[
Set the color for the active tab. R,G,B format.
The default here is a brightish green
]]
communications.chat.config.activeColors = {r = 139, g = 0, b = 0}
--[[
Set the color for the inactive tab. R,G,B format.
The default here is a drab grey
]]
communications.chat.config.inactiveColors = {r = 60, g = 60, b = 60}
--[[
Set the color for the chat window itself. R,G,B format.
Defaulted to the black of my twisted hardened soul. Or something.
]]
communications.chat.config.windowColors = {r = 0, g = 0, b = 0}
--[[
Set the color for the text on the active tab. Uses color names.
Set the default to purple. So the tab you're looking at, by default will be purple on bright green. 
Did I mention I'm a bit colorblind?
]]
communications.chat.config.activeTabText = "dark_goldenrod"
--[[
Set the color for the text on the inactive tabs. Uses color names.
Defaulted this to white. So the tabs you're not looking at will be white text on boring grey background.
]]
communications.chat.config.inactiveTabText = "white"
--[[
have to make sure a currentTab is set... 
so we'll use the one for the bucket, or the first one in the channels table
Or, you know... what it's currently set to, if it's already set.
]]
communications.chat.currentTab =
  communications.chat.currentTab or
  communications.chat.config.Alltab or
  communications.chat.config.channels[1]</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Code</name>
					<packageName></packageName>
					<script>--[[
If the label callbacks ever decide to start taking a function which is part of a table, then this will change.
Or if it's modified to take actual functions. Anonymous function clickcallback would be awfully nice.
]]

function communicationsChatSwitch(chat)
  local r = communications.chat.config.inactiveColors.r
  local g = communications.chat.config.inactiveColors.g
  local b = communications.chat.config.inactiveColors.b
  local newr = communications.chat.config.activeColors.r
  local newg = communications.chat.config.activeColors.g
  local newb = communications.chat.config.activeColors.b
  local oldchat = communications.chat.currentTab
  if communications.chat.currentTab ~= chat then
    communications.chat.windows[oldchat]:hide()
    communications.chat.tabs[oldchat]:setColor(r, g, b)
    communications.chat.tabs[oldchat]:echo(oldchat, communications.chat.config.inactiveTabText, "c")
    if communications.chat.config.blink and communications.chat.tabsToBlink[chat] then
      communications.chat.tabsToBlink[chat] = nil
    end
    if communications.chat.config.blink and chat == communications.chat.config.Alltab then
      communications.chat.tabsToBlink = {}
    end
  end
  communications.chat.tabs[chat]:setColor(newr, newg, newb)
  communications.chat.tabs[chat]:echo(chat, communications.chat.config.activeTabText, "c")
  communications.chat.windows[chat]:show()
  communications.chat.currentTab = chat
end

function communications.chat:resetUI()
  communications.chat.container =
    Geyser.Container:new(communications.chat[communications.chat.config.location]())
  communications.chat.tabBox =
    Geyser.HBox:new(
      {x = 0, y = 0, width = "100%", height = "25px", name = "WotMUDChatTabs"},
      communications.chat.container
    )
end

function communications.chat:create()
  --reset the UI
  communications.chat:resetUI()
  --Set some variables locally to increase readability
  local r = communications.chat.config.inactiveColors.r
  local g = communications.chat.config.inactiveColors.g
  local b = communications.chat.config.inactiveColors.b
  local winr = communications.chat.config.windowColors.r
  local wing = communications.chat.config.windowColors.g
  local winb = communications.chat.config.windowColors.b
  --iterate the table of channels and create some windows and tabs
  for i, tab in ipairs(communications.chat.config.channels) do
    communications.chat.tabs[tab] =
      Geyser.Label:new({name = string.format("tab%s", tab)}, communications.chat.tabBox)
    communications.chat.tabs[tab]:echo(tab, communications.chat.config.inactiveTabText, "c")
    communications.chat.tabs[tab]:setColor(r, g, b)
    communications.chat.tabs[tab]:setClickCallback("communicationsChatSwitch", tab)
    --      fontSize = communications.chat.config.fontSize,
    communications.chat.windows[tab] =
      Geyser.MiniConsole:new(
        {x = 0, y = 25, height = "100%", width = "100%", name = string.format("win%s", tab)},
        communications.chat.container
      )
    communications.chat.windows[tab]:setFontSize(communications.chat.config.fontSize)
    communications.chat.windows[tab]:setColor(winr, wing, winb)
    communications.chat.windows[tab]:setWrap(communications.chat.config.width)
    communications.chat.windows[tab]:hide()
  end
  local showme = communications.chat.config.Alltab or communications.chat.config.channels[1]
  communicationsChatSwitch(showme)
  --start the blink timers, if enabled
  if communications.chat.config.blink and not communications.chat.blinkTimerOn then
    communications.chat:blink()
  end
end

function communications.chat:append(chat)
  local r = communications.chat.config.windowColors.r
  local g = communications.chat.config.windowColors.g
  local b = communications.chat.config.windowColors.b
  selectCaptureGroup(1)
  local ofr, ofg, ofb = getFgColor()
  local obr, obg, obb = getBgColor()
  if communications.chat.config.preserveBackground then
    setBgColor(r, g, b)
  end
  copy()
  if communications.chat.config.timestamp then
    local timestamp = getTime(true, communications.chat.config.timestamp)
    local tsfg = {}
    local tsbg = {}
    local colorLeader = ""
    if communications.chat.config.timestampCustomColor then
      if type(communications.chat.config.timestampFG) == "string" then
        tsfg = color_table[communications.chat.config.timestampFG]
      else
        tsfg = communications.chat.config.timestampFG
      end
      if type(communications.chat.config.timestampBG) == "string" then
        tsbg = color_table[communications.chat.config.timestampBG]
      else
        tsbg = communications.chat.config.timestampBG
      end
      colorLeader =
        string.format("&lt;%s,%s,%s:%s,%s,%s&gt;", tsfg[1], tsfg[2], tsfg[3], tsbg[1], tsbg[2], tsbg[3])
    else
      colorLeader = string.format("&lt;%s,%s,%s:%s,%s,%s&gt;", ofr, ofg, ofb, obr, obg, obb)
    end
    local fullstamp = string.format("%s%s", colorLeader, timestamp)
    communications.chat.windows[chat]:decho(fullstamp)
    communications.chat.windows[chat]:echo(" ")
    if communications.chat.config.Alltab then
      communications.chat.windows[communications.chat.config.Alltab]:decho(fullstamp)
      communications.chat.windows[communications.chat.config.Alltab]:echo(" ")
    end
  end
  communications.chat.windows[chat]:append()
  if communications.chat.config.gag then
    deleteLine()
    tempLineTrigger(1, 1, [[if isPrompt() then deleteLine() end]])
  end
  if communications.chat.config.Alltab then
    appendBuffer(string.format("win%s", communications.chat.config.Alltab))
  end
  if communications.chat.config.blink and chat ~= communications.chat.currentTab then
    if
      (communications.chat.config.Alltab == communications.chat.currentTab) and
      not communications.chat.config.blinkOnAll
    then
      return
    else
      communications.chat.tabsToBlink[chat] = true
    end
  end
end

function communications.chat:blink()
  if communications.chat.blinkID then
    killTimer(communications.chat.blinkID)
  end
  if not communications.chat.config.blink then
    communications.chat.blinkTimerOn = false
    return
  end
  for tab, _ in pairs(communications.chat.tabsToBlink) do
    communications.chat.tabs[tab]:flash()
  end
  communications.chat.blinkID =
    tempTimer(
      communications.chat.config.blinkTime,
      function()
        communications.chat:blink()
      end
    )
end

function communications.chat:topright()
  return
    {
      fontSize = communications.chat.config.fontSize,
      x = string.format("-%sc", communications.chat.config.width + 2),
      y = 0,
      width = "-15px",
      height = string.format("%ic", communications.chat.config.lines + 2),
    }
end

function communications.chat:topleft()
  return
    {
      fontSize = communications.chat.config.fontSize,
      x = 0,
      y = 0,
      width = string.format("%sc", communications.chat.config.width),
      height = string.format("%ic", communications.chat.config.lines + 2),
    }
end

function communications.chat:bottomright()
  return
    {
      fontSize = communications.chat.config.fontSize,
      x = string.format("-%sc", communications.chat.config.width + 2),
      y = string.format("-%sc", communications.chat.config.lines + 2),
      width = "-15px",
      height = string.format("%ic", communications.chat.config.lines + 2),
    }
end

function communications.chat:bottomleft()
  return
    {
      fontSize = communications.chat.config.fontSize,
      x = 0,
      y = string.format("-%sc", communications.chat.config.lines + 2),
      width = string.format("%sc", communications.chat.config.width),
      height = string.format("%ic", communications.chat.config.lines + 2),
    }
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>communicationsOnStart</name>
					<packageName></packageName>
					<script>function communicationsOnStart()
  if communications.chat.use then
    communications.chat:create()
  end
end</script>
					<eventHandlerList>
						<string>sysLoadEvent</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Echo Functions</name>
					<packageName></packageName>
					<script>function communications.chat:cecho(chat, message)
  local alltab = communications.chat.config.Alltab
  local blink = communications.chat.config.blink
  cecho(string.format("win%s", chat), message)
  if alltab and chat ~= alltab then
    cecho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= communications.chat.currentTab then
    if (alltab == communications.chat.currentTab) and not communications.chat.config.blinkOnAll then
      return
    else
      communications.chat.tabsToBlink[chat] = true
    end
  end
end

function communications.chat:decho(chat, message)
  local alltab = communications.chat.config.Alltab
  local blink = communications.chat.config.blink
  decho(string.format("win%s", chat), message)
  if alltab and chat ~= alltab then
    decho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= communications.chat.currentTab then
    if (alltab == communications.chat.currentTab) and not communications.chat.config.blinkOnAll then
      return
    else
      communications.chat.tabsToBlink[chat] = true
    end
  end
end

function communications.chat:hecho(chat, message)
  local alltab = communications.chat.config.Alltab
  local blink = communications.chat.config.blink
  hecho(string.format("win%s", chat), message)
  if alltab and chat ~= alltab then
    hecho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= communications.chat.currentTab then
    if (alltab == communications.chat.currentTab) and not communications.chat.config.blinkOnAll then
      return
    else
      communications.chat.tabsToBlink[chat] = true
    end
  end
end

function communications.chat:echo(chat, message)
  local alltab = communications.chat.config.Alltab
  local blink = communications.chat.config.blink
  echo(string.format("win%s", chat), message)
  if alltab and chat ~= alltab then
    echo(string.format("win%s", alltab), message)
  end
  if blink and chat ~= communications.chat.currentTab then
    if (alltab == communications.chat.currentTab) and not communications.chat.config.blinkOnAll then
      return
    else
      communications.chat.tabsToBlink[chat] = true
    end
  end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
