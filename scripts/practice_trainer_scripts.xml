<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Practice Trainer</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>Practice Trainer Initializations</name>
				<packageName></packageName>
				<script>practice_trainer = practice_trainer or {}
practice_trainer.container =
  practice_trainer.container or
  Adjustable.Container:new(
    {
      name = "practice_trainer.container",
      adjLabelstyle = "background-color:rgba(255,255,255,100%); border: 5px groove grey;",
      buttonstyle =
        [[
      QLabel{ border-radius: 7px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
      ]],
      buttonFontSize = 10,
      buttonsize = 20,
      titleText = "Practice Trainer",
      titleTxtColor = "black",
      padding = 15,
      x = "25%",
      y = "10%",
      width = "50%",
      height = "80%",
      autoLoad = false,
      autoSave = false,
    }
  )
practice_trainer.stats =
  practice_trainer.stats or {str = 19, int = 16, wil = 12, dex = 18, con = 19}
practice_trainer.stats.sex = practice_trainer.stats.sex or "male"
practice_trainer.stats.race = practice_trainer.stats.race or "human"
practice_trainer.stats.class = practice_trainer.stats.class or "hunter"</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Practice Trainer Echo</name>
				<packageName></packageName>
				<script>function practice_trainer:echo(what, debug, err)
  local practice_trainer_tag = "&lt;white&gt;(&lt;gray&gt;practice_trainer&lt;white&gt;): &lt;white&gt;"
  local debug_tag = "&lt;deep_sky_blue&gt;(&lt;royal_blue&gt;debug&lt;deep_sky_blue&gt;): &lt;white&gt;"
  local err_tag = "&lt;coral&gt;(&lt;red&gt;error&lt;coral&gt;): &lt;white&gt;"
  
  if debug and not self.configs.dbug then return end
  if what:sub(0,1)=="\n" then
    cecho("\n")
    what = what:sub(2)
  end
  cecho(practice_trainer_tag)
  if debug then cecho(debug_tag) end
  if err then cecho(err_tag) end
  cecho(what)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Practices</name>
				<packageName></packageName>
				<script>practice_trainer.pracs = practice_trainer.pracs or {}
practice_trainer.pracs.rates =
  {
    [6] = {6, 4, 3, 2, 1, 1},
    [7] = {7, 5, 4, 2, 1, 1},
    [8] = {8, 6, 4, 3, 1, 1},
    [9] = {9, 7, 5, 3, 1, 1},
    [10] = {10, 8, 5, 4, 2, 1},
    [11] = {11, 8, 6, 4, 2, 1},
    [12] = {12, 9, 7, 4, 2, 1},
    [13] = {13, 10, 7, 5, 2, 1},
    [14] = {14, 11, 8, 5, 2, 1},
    [15] = {15, 12, 8, 6, 3, 1},
    [16] = {16, 12, 9, 6, 3, 1},
    [17] = {17, 13, 10, 6, 3, 1},
    [18] = {18, 14, 10, 7, 3, 1},
    [19] = {19, 15, 11, 7, 3, 1},
  }
practice_trainer.pracs.warrior =
  {
    "bash",
    "kick",
    "rescue",
    "shield parry",
    "charge",
    "long blades",
    "medium blades",
    "fencing blades",
    "axes",
    "clubs",
    "staves",
    "lances",
    "spears",
    "javelins",
    "polearms",
    "flails",
    "whips",
    "chains",
    "bows",
    "crossbows",
    "slings",
  }
practice_trainer.pracs.rogue =
  {
    "steal",
    "pick",
    "hide",
    "sneak",
    "dodge",
    "attack",
    "backstab",
    "palm",
    "short blades",
    "projectiles",
  }
practice_trainer.pracs.hunter =
  {
    "search",
    "track",
    "ride",
    "wisdom lore",
    "swim",
    "notice",
    "camouflage",
    "ranger sneak",
    "cover tracks",
    "survival",
  }

practice_trainer.warrior = practice_trainer.warrior or {}
practice_trainer.rogue = practice_trainer.rogue or {}
practice_trainer.hunter = practice_trainer.hunter or {}
for _, class in pairs({"warrior", "rogue", "hunter"}) do
  practice_trainer[class].pracs = practice_trainer[class].pracs or {}
  practice_trainer[class].percents = practice_trainer[class].percents or {}
  for k, v in pairs(practice_trainer.pracs[class]) do
    practice_trainer[class].pracs[v] = practice_trainer[class].pracs[v] or 0
    practice_trainer[class].percents[v] = practice_trainer[class].percents[v] or 0
  end
end
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Practice Queue</name>
				<packageName></packageName>
				<script>practice_trainer.pracs.queue = practice_trainer.pracs.queue or {}

function practice_trainer:push_queue(skill)
  table.insert(self.pracs.queue, skill)
end

function practice_trainer:pop_queue(skill)
  local skill_pos =
    table.collect(
      self.pracs.queue,
      function(key, value)
        if value == skill then
          return true
        end
      end
    )
  local max_pos = table.maxn(skill_pos)
  table.remove(self.pracs.queue, max_pos)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Info Label</name>
				<packageName></packageName>
				<script>practice_trainer.info =
  practice_trainer.info or
  Geyser.Label:new(
    {
      name = "practice_trainer.info",
      x = "31%",
      y = "62%",
      width = "50%",
      height = "26%",
      fgColor = "black",
      color = "white",
    },
    practice_trainer.container
  )
practice_trainer.info:setFontSize(10)
practice_trainer.info:setStyleSheet([[
  qproperty-wordWrap: true;
]])
practice_trainer.info:echo(
  [[
Click the green "+" buttons to increment a practice, stat, sex, race, or class.&lt;br&gt;
&lt;br&gt;
Click the red "-" buttons to decrement a practice, stat, sex, race, or class.&lt;br&gt;
&lt;br&gt;
Scroll with your mouse on the gray practice, stat, sex, race, or class value boxes to increment and decrement.&lt;br&gt;
&lt;br&gt;
Practice setups can be saved or loaded using the input bars below.
]]
)</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Reset Pracs</name>
				<packageName></packageName>
				<script>practice_trainer["reset_pracs_label"] =
  practice_trainer["reset_pracs_label"] or
  Geyser.Label:new(
    {
      name = "practice_trainer.reset_pracs_label",
      x = "90%",
      y = "65%",
      width = "10%",
      height = "5%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;Reset&lt;/center&gt;]],
    },
    practice_trainer.container
  )
practice_trainer["reset_pracs_label"]:setStyleSheet([[
  background-color: gray;
  border-width: 3px;
  border-style: solid;
  border-color: gray;
  border-radius: 3px;
]]) 
practice_trainer["reset_pracs_label"]:setClickCallback("practice_trainer:reset_pracs")

function practice_trainer:reset_pracs()
  for _, class in pairs({"warrior", "rogue", "hunter"}) do
    self[class].pracs = {}
    self[class].percents = {}
    for k, v in pairs(self.pracs[class]) do
      self[class].pracs[v] = 0
      self[class].percents[v] = 0
    end
  end
  self.pracs.queue = {}
  self:update_displays()
end</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Save and Load File</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Save and Load file</name>
					<packageName></packageName>
					<script>practice_trainer.file = {}
practice_trainer.file.save_label =
  practice_trainer.file.save_label or
  Geyser.Label:new(
    {
      name = "practice_trainer.file.save_label",
      x = "32%",
      y = "90%",
      width = "30%",
      height = "5%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;Type filename and press enter to save:&lt;/center&gt;]],
    },
    practice_trainer.container
  )
practice_trainer.file.save_name =
  practice_trainer.file.save_name or
  Geyser.CommandLine:new(
    {
      name = "practice_trainer.file.save_name",
      x = "62%",
      y = "90%",
      width = "38%",
      height = "5%",
      stylesheet = "border: 1px solid silver;",
    },
    practice_trainer.container
  )
practice_trainer.file.save_name:setAction(
  function(commandLineInput)
    practice_trainer:save_pracs(commandLineInput)
  end
)

practice_trainer.file.load_label =
  practice_trainer.file.load_label or
  Geyser.Label:new(
    {
      name = "practice_trainer.file.load_label",
      x = "32%",
      y = "95%",
      width = "30%",
      height = "5%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;Type filename and press enter to load:&lt;/center&gt;]],
    },
    practice_trainer.container
  )
practice_trainer.file.load_name =
  practice_trainer.file.load_name  or
  Geyser.CommandLine:new(
    {
      name = "practice_trainer.file.load_name ",
      x = "62%",
      y = "95%",
      width = "38%",
      height = "5%",
      stylesheet = "border: 1px solid silver;",
    },
    practice_trainer.container
  )
practice_trainer.file.load_name:setAction(
  function(commandLineInput)
    practice_trainer:load_pracs(commandLineInput)
    practice_trainer:update_displays()
  end
)


--hide the practice trainer after final item has been created,
--otherwise the command line will show
practice_trainer.container:hide()</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Save and Load Functions</name>
					<packageName></packageName>
					<script>function practice_trainer:save_pracs(fname)
  if not io.exists(getMudletHomeDir() .. "/practice_trainer") then
    lfs.mkdir(getMudletHomeDir() .. "/practice_trainer")
  end
  if fname == "" then
    self:echo("No filename provided.\n", false, true)
    return
  end
  if self:pracs_to_level() &gt; 51 then
    self:echo("More than 51 levels required. Cannot save practice setup.\n", false, true)
    return
  end
  local out_table =
    {
      sex = self.stats.sex,
      race = self.stats.race,
      class = self.stats.class,
      str = self.stats.str,
      int = self.stats.int,
      wil = self.stats.wil,
      dex = self.stats.dex,
      con = self.stats.con,
      warrior = table.deepcopy(self.warrior.pracs),
      rogue = table.deepcopy(self.rogue.pracs),
      hunter = table.deepcopy(self.hunter.pracs),
      queue = table.deepcopy(self.pracs.queue)
    }
  local out_file = getMudletHomeDir() .. "/practice_trainer/" .. fname .. ".lua"
  self:echo("Saving practices to "..out_file.."\n")
  table.save(out_file, out_table)
  self:echo("Practices saved.\n")
end

function practice_trainer:load_pracs(fname)
  local in_file = getMudletHomeDir() .. "/practice_trainer/" .. fname .. ".lua"
  if not io.exists(in_file) then
    self:echo("File "..in_file.." does not exist.\n",false,true)
    return
  end
  
  local in_table = {}
  
  self:echo("Loading practices from "..in_file.."\n")
  table.load(in_file, in_table)
  
  self.stats.sex = in_table.sex
  self.stats.race = in_table.race
  self.stats.class = in_table.class
  self.stats.str = in_table.str
  self.stats.int = in_table.int
  self.stats.wil = in_table.wil
  self.stats.dex = in_table.dex
  self.stats.con = in_table.con
  self.warrior.pracs = table.deepcopy(in_table.warrior)
  self.rogue.pracs = table.deepcopy(in_table.rogue)
  self.hunter.pracs = table.deepcopy(in_table.hunter)
  self.pracs.queue = table.deepcopy(in_table.queue)
  
  self:echo("Practices loaded.\n")
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Update Information</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Update Practice</name>
					<packageName></packageName>
					<script>function practice_trainer:add_practice(class, skill)
  if self.stats.race == "trolloc" and (skill == "ride" or skill == "swim") then
    return
  end
  self[class].pracs[skill] = self[class].pracs[skill] + 1
  self:push_queue(skill)
  self:update_displays()
  if self:pracs_to_level() &gt; 51 or self[class].percents[skill] &gt; 99 then
    self:subtract_practice(class, skill)
  end
end

function practice_trainer:subtract_practice(class, skill)
  if self[class].pracs[skill] &gt; 0 then
    self[class].pracs[skill] = self[class].pracs[skill] - 1
    self:pop_queue(skill)
  end
  self:update_displays()
end

function practice_trainer:practice_scroll(class, skill, event)
  if event.angleDeltaY &gt; 0 then
    self:add_practice(class, skill)
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_practice(class, skill)
  end
end

function practice_trainer:update_pracs()
  for _, class in pairs({"warrior", "rogue", "hunter"}) do
    for _, skill in pairs(self.pracs[class]) do
      while self[class].percents[skill] &gt; 99 do
        self:subtract_practice(class, skill)
        self:update_percents()
      end
    end
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Update Stats</name>
					<packageName></packageName>
					<script>function practice_trainer:add_stat(stat)
  if self.stats.race == "trolloc" then
    if stat == "str" then
      if self.stats[stat] &lt; 21 then
        self.stats[stat] = self.stats[stat] + 1
      end
    elseif self.stats[stat] &lt; 19 then
      self.stats[stat] = self.stats[stat] + 1
    end
  else
    if self.stats[stat] &lt; 19 then
      self.stats[stat] = self.stats[stat] + 1
    end
  end
  self:update_displays()
end

function practice_trainer:subtract_stat(stat)
  if stat == "int" or stat == "wil" then
    if self.stats[stat] &gt; 3 then
      self.stats[stat] = self.stats[stat] - 1
    end
  else
    if self.stats[stat] &gt; 9 then
      self.stats[stat] = self.stats[stat] - 1
    end
  end  
  self:update_displays()
end

function practice_trainer:stat_scroll(stat, event)
  if event.angleDeltaY &gt; 0 then
    self:add_stat(stat)
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_stat(stat)
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Update Sex</name>
					<packageName></packageName>
					<script>function practice_trainer:sex_stipulations()
  if
    self.stats.class == "channeler" and
    self.stats.sex == "male" and
    not (self.stats.race == "human" or self.stats.race == "dreadlord")
  then
    self.stats.class = "warrior"
  end
end

function practice_trainer:add_sex()
  local sex_table = {"male", "female"}
  local index = table.index_of(sex_table, self.stats.sex) - 1
  self.stats.sex = sex_table[(index + 1) % table.size(sex_table) + 1]
  self:sex_stipulations()
  self:update_displays()
end

function practice_trainer:subtract_sex()
  local sex_table = {"male", "female"}
  local index = table.index_of(sex_table, self.stats.sex) - 1
  self.stats.sex = sex_table[(index - 1) % table.size(sex_table) + 1]
  self:sex_stipulations()
  self:update_displays()
end

function practice_trainer:sex_scroll(event)
  if event.angleDeltaY &gt; 0 then
    self:add_sex()
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_sex()
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Update Race</name>
					<packageName></packageName>
					<script>function practice_trainer:race_stipulations(dir)
  if self.stats.race == "fade" then
    self.stats.class = "fade"
  elseif self.stats.race == "dreadlord" then
    self.stats.class = "channeler"
  elseif
    self.stats.class == "channeler" and
    ((self.stats.race == "seanchan" and self.stats.sex == "male") or self.stats.race == "trolloc" or self.stats.race == "grayman")
  then
    self.stats.class = "warrior"
  elseif self.stats.class == "fade" then
    self.stats.class = "warrior"
  end
  if self.stats.race == "trolloc" then
    self.hunter.pracs["ride"] = 0
    self.hunter.pracs["swim"] = 0
  else
    if self.stats.str &gt; 19 then
      self.stats.str = 19
    end
  end
end

function practice_trainer:add_race()
  local race_table = {"human", "seanchan", "trolloc", "fade", "dreadlord", "grayman"}
  local index = table.index_of(race_table, self.stats.race) - 1
  self.stats.race = race_table[(index + 1) % table.size(race_table) + 1]
  self:race_stipulations(1)
  self:update_displays()
end

function practice_trainer:subtract_race()
  local race_table = {"human", "seanchan", "trolloc", "fade", "dreadlord", "grayman"}
  local index = table.index_of(race_table, self.stats.race) - 1
  self.stats.race = race_table[(index - 1) % table.size(race_table) + 1]
  self:race_stipulations(-1)
  self:update_displays()
end

function practice_trainer:race_scroll(event)
  if event.angleDeltaY &gt; 0 then
    self:add_race()
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_race()
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Update Class</name>
					<packageName></packageName>
					<script>function practice_trainer:class_stipulations(dir)
  if self.stats.race == "fade" then
    self.stats.class = "fade"
  elseif self.stats.race == "dreadlord" then
    self.stats.class = "channeler"
  elseif
    self.stats.class == "channeler" and
    (
      (self.stats.race == "seanchan" and self.stats.sex == "male") or
      self.stats.race == "trolloc" or
      self.stats.race == "grayman"
    )
  then
    if dir == 1 then
      self:add_class()
    elseif dir == -1 then
      self:subtract_class()
    end
  elseif self.stats.class == "fade" and self.stats.race ~= "fade" then
    if dir == 1 then
      self:add_class()
    elseif dir == -1 then
      self:subtract_class()
    end
  end
end

function practice_trainer:add_class()
  local class_table = {"warrior", "rogue", "hunter", "channeler", "fade"}
  local index = table.index_of(class_table, self.stats.class) - 1
  self.stats.class = class_table[(index + 1) % table.size(class_table) + 1]
  self:class_stipulations(1)
  self:update_displays()
end

function practice_trainer:subtract_class()
  local class_table = {"warrior", "rogue", "hunter", "channeler", "fade"}
  local index = table.index_of(class_table, self.stats.class) - 1
  self.stats.class = class_table[(index - 1) % table.size(class_table) + 1]
  self:class_stipulations(-1)
  self:update_displays()
end

function practice_trainer:class_scroll(event)
  if event.angleDeltaY &gt; 0 then
    self:add_class()
  elseif event.angleDeltaY &lt; 0 then
    self:subtract_class()
  end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Convert Information</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Practice to Percent</name>
					<packageName></packageName>
					<script>function practice_trainer:get_skill_class(skill)
  if table.contains(self.pracs.warrior, skill) then
    return "warrior"
  elseif table.contains(self.pracs.rogue, skill) then
    return "rogue"
  elseif table.contains(self.pracs.hunter, skill) then
    return "hunter"
  end
  return nil
end

function practice_trainer:add_percent(class, skill)
  local start_rates =
    {
      warrior =
        math.floor(self.stats.str / 2) +
        math.floor(self.stats.dex / 4) +
        math.floor(self.stats.con / 4),
      rogue = math.floor(self.stats.dex * 3 / 4) + math.floor(self.stats.int / 4),
      hunter = math.floor((self.stats.str + self.stats.int + self.stats.wil + self.stats.dex) / 4),
    }
  local rate_factor = 1
  if skill == "steal" or skill == "palm" or skill == "swim" or skill == "cover tracks" then
    rate_factor = 1.5
  end
  local prac_percent = self[class].percents[skill]
  if prac_percent &lt;= 20 then
    prac_percent =
      prac_percent + math.floor(rate_factor * self.pracs.rates[start_rates[class]][1])
  elseif prac_percent &lt;= 40 then
    prac_percent =
      prac_percent + math.floor(rate_factor * self.pracs.rates[start_rates[class]][2])
  elseif prac_percent &lt;= 60 then
    prac_percent =
      prac_percent + math.floor(rate_factor * self.pracs.rates[start_rates[class]][3])
  elseif prac_percent &lt;= 80 then
    prac_percent =
      prac_percent + math.floor(rate_factor * self.pracs.rates[start_rates[class]][4])
  elseif prac_percent &lt;= 90 then
    prac_percent =
      prac_percent + math.floor(rate_factor * self.pracs.rates[start_rates[class]][5])
  else
    prac_percent =
      prac_percent + math.floor(rate_factor * self.pracs.rates[start_rates[class]][6])
  end
  self[class].percents[skill] = prac_percent
end

function practice_trainer:prac_residuals(skill)

  if skill == "short blades" then
    for k, v in pairs({"long blades", "medium blades", "fencing blades"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.rogue.percents["short blades"]*0.4))
    end
  end
  
  if table.contains({"long blades", "medium blades", "fencing blades"}, skill) then
    for k, v in pairs({"long blades", "medium blades", "fencing blades"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.warrior.percents[skill]*0.4))
    end
  end
  
  if skill == "projectiles" then
    for k, v in pairs({"bows", "crossbows", "slings"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.rogue.percents["projectiles"]*0.4))
    end
  end
  
  if table.contains({"bows", "crossbows", "slings"}, skill) then
    for k, v in pairs({"bows", "crossbows", "slings"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.warrior.percents[skill]*0.4))
    end
  end
  
  if table.contains({"axes", "clubs", "staves"}, skill) then
    for k, v in pairs({"axes", "clubs", "staves"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.warrior.percents[skill]*0.4))
    end
  end
  
  if table.contains({"lances", "spears", "javelins", "polearms"}, skill) then
    for k, v in pairs({"lances", "spears", "javelins", "polearms"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.warrior.percents[skill]*0.4))
    end
  end
  
  if table.contains({"flails", "whips", "chains"}, skill) then
    for k, v in pairs({"flails", "whips", "chains"}) do
      self.warrior.percents[v] = math.max(self.warrior.percents[v], math.floor(self.warrior.percents[skill]*0.4))
    end
  end
  
  if skill == "hide" then
    self.hunter.percents["camouflage"] = math.max(self.hunter.percents["camouflage"], math.floor(self.rogue.percents["hide"]*0.4))
  end
  
  if skill == "camouflage" then
    self.rogue.percents["hide"] = math.max(self.rogue.percents["hide"], math.floor(self.hunter.percents["camouflage"]*0.4))
  end
  
  if skill == "sneak" then
    self.hunter.percents["ranger sneak"] = math.max(self.hunter.percents["ranger sneak"], math.floor(self.rogue.percents["sneak"]*0.4))
  end
  
  if skill == "ranger sneak" then
    self.rogue.percents["sneak"] = math.max(self.rogue.percents["sneak"], math.floor(self.hunter.percents["ranger sneak"]*0.4))
  end

end

function practice_trainer:update_percents()
  for _, class in pairs({"warrior", "rogue", "hunter"}) do
    for _, skill in pairs(self.pracs[class]) do
      self[class].percents[skill] = 0
    end
  end

  for _, skill in pairs(self.pracs.queue) do
    local class = self:get_skill_class(skill)
    self:add_percent(class, skill)
    self:prac_residuals(skill)
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Practice to Level</name>
					<packageName></packageName>
					<script>function practice_trainer:get_total_class_pracs()
  local prac_totals = {warrior=0, rogue=0, hunter=0}
  
  for _, class in pairs({"warrior", "rogue", "hunter"}) do
    for k, v in pairs(self.pracs[class]) do
      prac_totals[class] = prac_totals[class] + self[class].pracs[v]
    end
  end
  return prac_totals
end

function practice_trainer:get_total_pracs()
  local prac_totals = self:get_total_class_pracs()
  if self.stats.class == "warrior" then
    return prac_totals.warrior + 3*prac_totals.rogue + 2*prac_totals.hunter
  elseif self.stats.class == "rogue" then
    return 3*prac_totals.warrior + prac_totals.rogue + 2*prac_totals.hunter
  elseif self.stats.class == "hunter" then
    return 2*prac_totals.warrior + 2*prac_totals.rogue + prac_totals.hunter
  elseif self.stats.class == "fade" then
    return prac_totals.warrior + prac_totals.rogue + prac_totals.hunter
  elseif self.stats.class == "channeler" then
    if self.stats.sex == "male" then
      return 3*prac_totals.warrior + 3*prac_totals.rogue + 2*prac_totals.hunter
    else
      return 4*prac_totals.warrior + 3*prac_totals.rogue + 2*prac_totals.hunter
    end
  end
  --throw error if something unknown passes through here
  return nil
end

function practice_trainer:pracs_to_level()
  local prac_gain = {human = 5, seanchan = 5, trolloc = 3, fade = 4, dreadlord = 5, grayman = 5}
  
  local level = 1
  local pracs = 8
  
  while pracs &lt; self:get_total_pracs() do
    level = level + 1
    if level &lt;= 30 then
      pracs = pracs + prac_gain[self.stats.race]
    else
      pracs = pracs + 2
    end
  end
  return level
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Displays</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Warrior/Rogue/Hunter Practices Displays</name>
					<packageName></packageName>
					<script>practice_trainer.warrior.container =
  practice_trainer.warrior.container or
  Geyser.Container:new(
    {name = "practice_trainer.warrior.container", x = "0%", y = "0%", width = "30%", height = "90%"},
    practice_trainer.container
  )
practice_trainer.rogue.container =
  practice_trainer.rogue.container or
  Geyser.Container:new(
    {name = "practice_trainer.rogue.container", x = "31%", y = "0%", width = "30%", height = "90%"},
    practice_trainer.container
  )
practice_trainer.hunter.container =
  practice_trainer.hunter.container or
  Geyser.Container:new(
    {name = "practice_trainer.hunter.container", x = "62%", y = "0%", width = "38%", height = "90%"},
    practice_trainer.container
  )
local colors = {warrior = "sienna", rogue = "dark_slate_gray", hunter = "yellow_green"}
for _, class in pairs({"warrior", "rogue", "hunter"}) do
  practice_trainer[class].label =
    practice_trainer[class].label or
    Geyser.Label:new(
      {
        name = "practice_trainer." .. class .. ".label",
        x = "0%",
        y = "0%",
        width = "100%",
        height = "4%",
        fgColor = "black",
        color = colors[class],
        message = [[&lt;center&gt;]] .. class .. [[&lt;/center&gt;]],
      },
      practice_trainer[class].container
    )
end
for _, class in pairs({"warrior", "rogue", "hunter"}) do
  for k, v in pairs(practice_trainer.pracs[class]) do
    local ypos = k * 4 + 1
    ypos = ypos .. "%"
    practice_trainer[class][v .. "_label"] =
      practice_trainer[class][v .. "_label"] or
      Geyser.Label:new(
        {
          name = "practice_trainer." .. class .. "." .. v .. "_label",
          x = "0%",
          y = ypos,
          width = "60%",
          height = "4%",
          fgColor = "black",
          color = "white",
          message = [[&lt;center&gt;]] .. v .. [[&lt;/center&gt;]],
        },
        practice_trainer[class].container
      )
    if v == "ride" or v == "wisdom lore" or v == "survival" then
      practice_trainer[class][v .. "_label"]:echo(
        "&lt;center&gt;" ..
        v ..
        " (level " ..
        math.floor(
          practice_trainer[class].percents[v] / 14
        ) ..
        ")"
      )
    end
    practice_trainer[class][v .. "_%_label"] =
      practice_trainer[class][v .. "_%_label"] or
      Geyser.Label:new(
        {
          name = "practice_trainer." .. class .. "." .. v .. "_%_label",
          x = "60%",
          y = ypos,
          width = "20%",
          height = "4%",
          fgColor = "black",
          color = "white",
          message = [[&lt;center&gt;]] .. practice_trainer[class].pracs[v] .. [[%&lt;/center&gt;]],
        },
        practice_trainer[class].container
      )
    practice_trainer[class][v .. "_%_label"]:setStyleSheet([[
      background-color: white;
      border-width: 3px;
      border-style: solid;
      border-color: gray;
      border-radius: 3px;
    ]])
    setLabelWheelCallback(
      "practice_trainer." .. class .. "." .. v .. "_%_label",
      "practice_trainer:practice_scroll",
      class,
      v
    )
    
    practice_trainer[class][v .. "_-_label"] =
      practice_trainer[class][v .. "_-_label"] or
      Geyser.Label:new(
        {
          name = "practice_trainer." .. class .. "." .. v .. "_-_label",
          x = "80%",
          y = ypos,
          width = "10%",
          height = "4%",
          fgColor = "black",
          color = "white",
          message = [[&lt;center&gt;-&lt;/center&gt;]],
        },
        practice_trainer[class].container
      )
      
    practice_trainer[class][v .. "_-_label"]:setStyleSheet([[
      background-color: white;
      border-width: 3px;
      border-style: solid;
      border-color: red;
      border-radius: 3px;
    ]])
    practice_trainer[class][v .. "_-_label"]:setClickCallback(
      "practice_trainer:subtract_practice", class, v
    )
    
    practice_trainer[class][v .. "_+_label"] =
      practice_trainer[class][v .. "_+_label"] or
      Geyser.Label:new(
        {
          name = "practice_trainer." .. class .. "." .. v .. "_+_label",
          x = "90%",
          y = ypos,
          width = "10%",
          height = "4%",
          fgColor = "black",
          color = "white",
          message = [[&lt;center&gt;+&lt;/center&gt;]],
        },
        practice_trainer[class].container
      )
    practice_trainer[class][v .. "_+_label"]:setStyleSheet([[
      background-color: white;
      border-width: 3px;
      border-style: solid;
      border-color: green;
      border-radius: 3px;
    ]])
    practice_trainer[class][v .. "_+_label"]:setClickCallback(
      "practice_trainer:add_practice", class, v
    )
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Character Stats Displays</name>
					<packageName></packageName>
					<script>practice_trainer.stats.container =
  practice_trainer.stats.container or
  Geyser.Container:new(
    {name = "practice_trainer.stats.container", x = "31%", y = "45%", width = "69%", height = "15%"},
    practice_trainer.container
  )
  
for k, stat in pairs({"str", "int", "wil", "dex", "con"}) do
  local xpos = (k - 1) * 20
  practice_trainer.stats[stat .. "_label"] =
    practice_trainer.stats[stat .. "_label"] or
    Geyser.Label:new(
      {
        name = "practice_trainer.stats." .. stat .. "_label",
        x = xpos .. "%",
        y = "0%",
        width = "6%",
        height = "30%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;]] .. stat .. [[&lt;/center&gt;]],
      },
      practice_trainer.stats.container
    )
  practice_trainer.stats[stat .. "_val_label"] =
    practice_trainer.stats[stat .. "_val_label"] or
    Geyser.Label:new(
      {
        name = "practice_trainer.stats." .. stat .. "_val_label",
        x = (xpos + 6) .. "%",
        y = "0%",
        width = "5%",
        height = "30%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;]] .. practice_trainer.stats[stat] .. [[&lt;/center&gt;]],
      },
      practice_trainer.stats.container
    )
  practice_trainer.stats[stat .. "_val_label"]:setStyleSheet([[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: gray;
    border-radius: 3px;
  ]])
  setLabelWheelCallback(
    "practice_trainer.stats." .. stat .. "_val_label", "practice_trainer:stat_scroll", stat
  )
  
  practice_trainer.stats[stat .. "_-_label"] =
    practice_trainer.stats[stat .. "_-_label"] or
    Geyser.Label:new(
      {
        name = "practice_trainer.stats." .. stat .. "_-_label",
        x = (xpos + 11) .. "%",
        y = "0%",
        width = "4%",
        height = "30%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;-&lt;/center&gt;]],
      },
      practice_trainer.stats.container
    )
  practice_trainer.stats[stat .. "_-_label"]:setStyleSheet([[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: red;
    border-radius: 3px;
  ]])
  practice_trainer.stats[stat .. "_-_label"]:setClickCallback(
    "practice_trainer:subtract_stat", stat
  )
  practice_trainer.stats[stat .. "_+_label"] =
    practice_trainer.stats[stat .. "_+_label"] or
    Geyser.Label:new(
      {
        name = "practice_trainer.stats." .. stat .. "_+_label",
        x = (xpos + 15) .. "%",
        y = "0%",
        width = "4%",
        height = "30%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;+&lt;/center&gt;]],
      },
      practice_trainer.stats.container
    )
  practice_trainer.stats[stat .. "_+_label"]:setStyleSheet([[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: green;
    border-radius: 3px;
  ]])
  practice_trainer.stats[stat .. "_+_label"]:setClickCallback("practice_trainer:add_stat", stat)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Character Sex/Race/Class Displays</name>
					<packageName></packageName>
					<script>practice_trainer.stats["sex_label"] =
  practice_trainer.stats["sex_label"] or
  Geyser.Label:new(
    {
      name = "practice_trainer.stats.sex_label",
      x = "0%",
      y = "40%",
      width = "10%",
      height = "30%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;]] .. practice_trainer.stats.sex .. [[&lt;/center&gt;]],
    },
    practice_trainer.stats.container
  )
practice_trainer.stats["sex_label"]:setStyleSheet(
  [[
  background-color: white;
  border-width: 3px;
  border-style: solid;
  border-color: gray;
  border-radius: 3px;
]]
)
setLabelWheelCallback("practice_trainer.stats.sex_label", "practice_trainer:sex_scroll")
practice_trainer.stats["sex_-_label"] =
  practice_trainer.stats["sex_-_label"] or
  Geyser.Label:new(
    {
      name = "practice_trainer.stats.sex_-_label",
      x = "1%",
      y = "70%",
      width = "4%",
      height = "30%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;-&lt;/center&gt;]],
    },
    practice_trainer.stats.container
  )
practice_trainer.stats["sex_-_label"]:setStyleSheet(
  [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: red;
    border-radius: 3px;
  ]]
)
practice_trainer.stats["sex_-_label"]:setClickCallback("practice_trainer:subtract_sex")
practice_trainer.stats["sex_+_label"] =
  practice_trainer.stats["sex_+_label"] or
  Geyser.Label:new(
    {
      name = "practice_trainer.stats.sex_+_label",
      x = "5%",
      y = "70%",
      width = "4%",
      height = "30%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;+&lt;/center&gt;]],
    },
    practice_trainer.stats.container
  )
practice_trainer.stats["sex_+_label"]:setStyleSheet(
  [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: green;
    border-radius: 3px;
  ]]
)
practice_trainer.stats["sex_+_label"]:setClickCallback("practice_trainer:add_sex")



practice_trainer.stats["race_label"] =
  practice_trainer.stats["race_label"] or
  Geyser.Label:new(
    {
      name = "practice_trainer.stats.race_label",
      x = "12%",
      y = "40%",
      width = "15%",
      height = "30%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;]] .. practice_trainer.stats.race .. [[&lt;/center&gt;]],
    },
    practice_trainer.stats.container
  )
practice_trainer.stats["race_label"]:setStyleSheet(
  [[
  background-color: white;
  border-width: 3px;
  border-style: solid;
  border-color: gray;
  border-radius: 3px;
]]
)
setLabelWheelCallback("practice_trainer.stats.race_label", "practice_trainer:race_scroll")
practice_trainer.stats["race_-_label"] =
  practice_trainer.stats["race_-_label"] or
  Geyser.Label:new(
    {
      name = "practice_trainer.stats.race_-_label",
      x = "15%",
      y = "70%",
      width = "4%",
      height = "30%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;-&lt;/center&gt;]],
    },
    practice_trainer.stats.container
  )
practice_trainer.stats["race_-_label"]:setStyleSheet(
  [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: red;
    border-radius: 3px;
  ]]
)
practice_trainer.stats["race_-_label"]:setClickCallback("practice_trainer:subtract_race")
practice_trainer.stats["race_+_label"] =
  practice_trainer.stats["race_+_label"] or
  Geyser.Label:new(
    {
      name = "practice_trainer.stats.race_+_label",
      x = "20%",
      y = "70%",
      width = "4%",
      height = "30%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;+&lt;/center&gt;]],
    },
    practice_trainer.stats.container
  )
practice_trainer.stats["race_+_label"]:setStyleSheet(
  [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: green;
    border-radius: 3px;
  ]]
)
practice_trainer.stats["race_+_label"]:setClickCallback("practice_trainer:add_race")

















practice_trainer.stats["class_label"] =
  practice_trainer.stats["class_label"] or
  Geyser.Label:new(
    {
      name = "practice_trainer.stats.class_label",
      x = "29%",
      y = "40%",
      width = "15%",
      height = "30%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;]] .. practice_trainer.stats.class .. [[&lt;/center&gt;]],
    },
    practice_trainer.stats.container
  )
practice_trainer.stats["class_label"]:setStyleSheet(
  [[
  background-color: white;
  border-width: 3px;
  border-style: solid;
  border-color: gray;
  border-radius: 3px;
]]
)
setLabelWheelCallback("practice_trainer.stats.class_label", "practice_trainer:class_scroll")
practice_trainer.stats["class_-_label"] =
  practice_trainer.stats["class_-_label"] or
  Geyser.Label:new(
    {
      name = "practice_trainer.stats.class_-_label",
      x = "32%",
      y = "70%",
      width = "4%",
      height = "30%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;-&lt;/center&gt;]],
    },
    practice_trainer.stats.container
  )
practice_trainer.stats["class_-_label"]:setStyleSheet(
  [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: red;
    border-radius: 3px;
  ]]
)
practice_trainer.stats["class_-_label"]:setClickCallback("practice_trainer:subtract_class")
practice_trainer.stats["class_+_label"] =
  practice_trainer.stats["class_+_label"] or
  Geyser.Label:new(
    {
      name = "practice_trainer.stats.class_+_label",
      x = "37%",
      y = "70%",
      width = "4%",
      height = "30%",
      fgColor = "black",
      color = "white",
      message = [[&lt;center&gt;+&lt;/center&gt;]],
    },
    practice_trainer.stats.container
  )
practice_trainer.stats["class_+_label"]:setStyleSheet(
  [[
    background-color: white;
    border-width: 3px;
    border-style: solid;
    border-color: green;
    border-radius: 3px;
  ]]
)
practice_trainer.stats["class_+_label"]:setClickCallback("practice_trainer:add_class")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Total Practice and Level Displays</name>
					<packageName></packageName>
					<script>practice_trainer.stats["total_pracs_label"] =
    practice_trainer.stats["total_pracs_label"] or
    Geyser.Label:new(
      {
        name = "practice_trainer.stats.total_pracs_label",
        x = "46%",
        y = "40%",
        width = "26%",
        height = "40%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;Practices required: ]] .. practice_trainer:get_total_pracs() .. [[&lt;/center&gt;]],
      },
      practice_trainer.stats.container
    )
    
practice_trainer.stats["level_label"] =
    practice_trainer.stats["level_label"] or
    Geyser.Label:new(
      {
        name = "practice_trainer.stats.level_label",
        x = "73%",
        y = "40%",
        width = "26%",
        height = "40%",
        fgColor = "black",
        color = "white",
        message = [[&lt;center&gt;Levels required: ]] .. practice_trainer:pracs_to_level() .. [[&lt;/center&gt;]],
      },
      practice_trainer.stats.container
    )
</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<Script isActive="yes" isFolder="no">
				<name>Update Displays</name>
				<packageName></packageName>
				<script>function practice_trainer:update_stat_display()
  for _, stat in pairs({"str", "int", "wil", "dex", "con"}) do
    self.stats[stat .. "_val_label"]:echo("&lt;center&gt;" .. self.stats[stat])
  end
end

function practice_trainer:update_prac_display()
  for _, class in pairs({"warrior", "rogue", "hunter"}) do
    for k, v in pairs(self.pracs[class]) do
      self[class][v .. "_%_label"]:echo(
        "&lt;center&gt;" .. self[class].percents[v] .. "%"
      )
      if v == "ride" or v == "wisdom lore" or v == "survival" then
        self[class][v.."_label"]:echo("&lt;center&gt;"..v.." (level "..math.floor(self[class].percents[v] / 14)..")")
      end
    end
  end
end

function practice_trainer:update_total_pracs_display()
  self.stats["total_pracs_label"]:echo("&lt;center&gt;Practices required: "..practice_trainer:get_total_pracs())
end


function practice_trainer:update_levels_display()
  self.stats["level_label"]:echo("&lt;center&gt;Levels required: "..practice_trainer:pracs_to_level())
end

function practice_trainer:update_sex_race_class_display()
  self.stats["sex_label"]:echo("&lt;center&gt;" .. self.stats.sex)
  self.stats["race_label"]:echo("&lt;center&gt;" .. self.stats.race)
  self.stats["class_label"]:echo("&lt;center&gt;" .. self.stats.class)
end

function practice_trainer:update_displays()
  self:update_percents()
  self:update_pracs()
  self:update_sex_race_class_display()
  self:update_stat_display()
  self:update_prac_display()
  self:update_total_pracs_display()
  self:update_levels_display()
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
