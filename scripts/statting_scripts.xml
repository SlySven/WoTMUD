<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Statting</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>statting initializations</name>
				<packageName></packageName>
				<script>statting = statting or {container = "pouch", weapon = "staff"}

statting.configs = {}</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>statting:echo</name>
				<packageName></packageName>
				<script>function statting:echo(what, debug, err)
  --colored tags for message echo
  local main_tag = "&lt;white&gt;(&lt;gray&gt;statting&lt;white&gt;): &lt;white&gt;"
  local debug_tag = "&lt;deep_sky_blue&gt;(&lt;royal_blue&gt;debug&lt;deep_sky_blue&gt;): &lt;white&gt;"
  local err_tag = "&lt;coral&gt;(&lt;red&gt;error&lt;coral&gt;): &lt;white&gt;"
  
  --if debug message and config debug is false, return without echoing
  if debug and not self.configs.dbug then return end
  
  --if start of message is new line, print that before colored tags of message echo
  if what:sub(0,1)=="\n" then
    cecho("\n")
    what = what:sub(2)
  end
  cecho(main_tag)
  if debug then cecho(debug_tag) end
  if err then cecho(err_tag) end
  cecho(what)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>statting connection/disconnection</name>
				<packageName></packageName>
				<script>function statting:sys_disconnection(event)
  if not self.statting then return end
  
  if self.autoconnect and self.name and self.password then
    self.reconnect_wait = self.reconnect_wait or 5
    self:echo("&lt;green&gt;Starting "..self.reconnect_wait.." minute timer for reconnection for statting.\n")
    self.reconnect_timer = tempTimer(self.reconnect_wait * 60 + 1, function () connectToServer("game.wotmud.org", 2224) end)
  else
    self:echo("&lt;red&gt;Disabling the statting script.\n")
    self.stats = nil
    self.statting = false
    disableTrigger("Statting")
  end
end

registerAnonymousEventHandler("sysExitEvent", "statting:sys_disconnection")
registerAnonymousEventHandler("sysDisconnectionEvent", "statting:sys_disconnection")


function statting:sys_connection(event)
  if self.reconnect_timer then
    killTimer(self.reconnect_timer)
  end
end

registerAnonymousEventHandler("sysLoadEvent", "statting:sys_connection")
registerAnonymousEventHandler("sysConnectionEvent", "statting:sys_connection")


function statting:reconnection_actions(event)
  if not self.statting then 
    return
  else
    sendAll(self.name, self.password, "score", "stat")
    disableTrigger("Statting_Kill_Sapling")
    enableTrigger("Statting_Entered_New_Room")
    enableTrigger("Statting_Too_Exhausted")
    self:move_rooms()
  end
end

registerAnonymousEventHandler("sysConnectionEvent", "statting:reconnection_actions")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>statting:save_stats</name>
				<packageName></packageName>
				<script>function statting:save_stats(str, int, wil, dex, con, sum)
  local fname = getMudletHomeDir() .. "/stats.csv"
  
  if not io.exists(fname) then
    local file = io.open(fname, "w+")
    file:write("sex,race,class,homeland,str,int,wil,dex,con,sum\n")
    io.close(file)
  end
  
  local file = io.open(fname, "a")
  file:write(
    self.sex .. "," ..
    self.race .. "," ..
    self.class .. "," ..
    self.homeland .. "," ..
    str .. "," ..
    int .. "," .. 
    wil .. "," ..
    dex .. "," ..
    con .. "," ..
    sum .. "\n"
  )
  io.close(file)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>statting:show_help</name>
				<packageName></packageName>
				<script>function statting:show_help()
  local help =
  [[
    &lt;cyan&gt;Statting Script&lt;reset&gt;

    This script will partly automate the statting process, restat for stats which
    do not meet the input desired values, and save all stats in a file located
    at ]] .. getMudletHomeDir() .. [[/stats.csv
    
    Below is a brief overview of some commands that this script includes.
    All commands can be found in the appropriate statting folder under mudlet aliases.
    
    In order to maximize the efficiency of the script, you should prepare yourself with plenty of
    lights (if you do not have night vision) with ALL of them placed inside a container (which you
    can then specify using the alias below). You should also prepare yourself with extra weapons
    (which you can also specify using the alias below) in case your wielded weapon breaks. The extra
    weapons can be kept in the same container or in your inventory. Finally, you should ensure that
    you are holding an oilstone or sandstone, whichever is used to mend your choice of weapon.
    
    Make sure you are in a room with saplings, and then type (for example)
    "stat 18 10 10 18 18" to set your minimum desired stats and begin statting.

    &lt;cyan&gt;Commands:&lt;reset&gt;
        &lt;yellow&gt;statting help&lt;reset&gt; - Display this help message.
        &lt;yellow&gt;stat str int wil dex con (sum)&lt;reset&gt; - Begin statting for the desired minimum
            values. If an additional number is provided for the statsum, any set of stats
            that meets that statsum will count as a success, even if the individual values
            don't quite meet your desires. By default the sum is simply the sum of the individual
            stats. This means that, for example, "stat 19 12 12 19 18" will also accept a
            19 12 12 18 19, a 18 13 12 19 18, or a 18 12 14 18 18 as they all have equivalent
            statsums. This may at times be undesired, but it is my belief that it is better to be
            safe and keep potentially good options rather than throw them out.
        &lt;yellow&gt;statting&lt;reset&gt; - This will enable/disable the statting triggers and scripts. 
        &lt;yellow&gt;statting container xxx&lt;reset&gt; - Set the container that you are using to store your lights.
            Example: statting container pack, statting container purse
            Default: pouch
            If you do not have night vision, the script will handle holding/removing lights at 
            night/day, removing burnt out lights, getting them from the container, and reholding
            them. Extra lights should ALWAYS be kept in the container to avoid confusing new
            and old lights in the inventory.
        &lt;yellow&gt;statting weapon xxx&lt;reset&gt; - Set the weapon you are using to stat with.
            Example: statting weapon dagger, statting weapon axe
            Default: staff
            The script will handle wielding new weapons when the current one breaks. It will also
            handle removing and mending your weapon when it becomes scratched, if you are holding
            an oilstone or sandstone.
        &lt;yellow&gt;statting autoconnect&lt;reset&gt; - Toggle whether the script should attempt to autoconnect
            to the game in the event of a disconnection.
        &lt;yellow&gt;statting name xxx&lt;reset&gt; - Set the name to use for autoconnection
        &lt;yellow&gt;statting password xxx&lt;reset&gt; - Set the password to use for autoconnection
        &lt;yellow&gt;statting reconnect xxx&lt;reset&gt; - Set how long (in minutes) to wait before attempting
            to reconnect to the game. Default: 5 minutes   
            
]]
  cecho(help)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>statting:move_rooms</name>
				<packageName></packageName>
				<script>function statting:move_rooms()
  local sapling_rooms = {
    ["Hills of Kintara"] = {
      572,
      571,
      574,
      613,
      612,
      614,
      618,
      619,
      620,
      622,
      616,
      615,
      609,
      610,
      611,
      623,
      624,
      608,
      576,
      570,
    },
    ["The Lugard Highway"] = {
      2175,
      2158,
    },
    ["Emond's Field"] = {
      2946,
    },
    ["Watch Hill"] = {
      2932,
      2939,
      2956,
    },
    ["Quarry Road"] = {
      3112,
      3118,
      3123,
    },
    ["South Misty Mountains"] = {
      3397,
      3400,
    },
    ["Foothills of Tamika"] = {
      20370,
      20368,
      20355,
      20366,
      20417,
    },
    ["The Blasted Lands"] = {
      18913,
      18914,
      18921,
      18932,
      18934,
      18936,
      18927,
      18919,
      18895,
      18880, 
    }
  }
  
  local zone = getRoomUserData(getPlayerRoom(), "zone")
  
  if not sapling_rooms[zone] then
    statting:echo("\nSapling rooms for current zone not known. Waiting here.\n", false, true)
    return
  end
  
  local index = table.index_of(sapling_rooms[zone],getPlayerRoom()) or 0
  index = index % table.size(sapling_rooms[zone])
  index = index + 1
  
  if getPath(getPlayerRoom(), sapling_rooms[zone][index]) then
    for _, dir in pairs(speedWalkDir) do
      send(dir)
    end
    send("say Time to see if there's any chopping that needs done here!")
  else
    statting:echo("\nCannot get a path to the next sapling room. Waiting here.\n", false, true)
  end
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
